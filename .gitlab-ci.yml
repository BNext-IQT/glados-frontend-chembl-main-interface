variables:
  DOCKER_TLS_CERTDIR: ""
  GIT_STRATEGY: clone
  REGISTRY_USER: chembl/chembl
  SERVER_APPLICATION: main-web-interface/glados-frontend-chembl-main-interface
  SERVER_IMAGE_TAG: ${CI_REGISTRY}/${REGISTRY_USER}/${SERVER_APPLICATION}:${CI_COMMIT_SHORT_SHA}
  DOCKER_DRIVER: overlay
  CONFIGS_FOLDER: run_config
  LATEST_BUILD_IMAGE_TAG: $CI_REGISTRY/$REGISTRY_USER/${SERVER_APPLICATION}:latest_build
  LATEST_PROD_IMAGE_TAG: $CI_REGISTRY/$REGISTRY_USER/${SERVER_APPLICATION}:${CI_COMMIT_SHORT_SHA}_latest_prod
  # Config unit tests
  CONFIG_UNIT_TESTS_FILE_PATH: ${CONFIGS_FOLDER}/unit_tests.yml
  # Config staging
  CONFIG_STAGING_FILE_PATH: ${CONFIGS_FOLDER}/staging.yml
  CONFIG_GUNICORN_STAGING_FILE_PATH: ${CONFIGS_FOLDER}/staging.gunicorn.config.py
  INGRESS_STAGING_FILE_PATH: ${CONFIGS_FOLDER}/ingress-staging.yml
  AUTOSCALER_STAGING_FILE_PATH: ${CONFIGS_FOLDER}/autoscaler-staging.yml
  # Config prod_hx
  CONFIG_PROD_HX_FILE_PATH: ${CONFIGS_FOLDER}/prod_hx.yml
  CONFIG_GUNICORN_PROD_HX_FILE_PATH: ${CONFIGS_FOLDER}/prod_hx.gunicorn.config.py
  INGRESS_PROD_HX_FILE_PATH: ${CONFIGS_FOLDER}/ingress-prod_hx.yml
  AUTOSCALER_PROD_HX_FILE_PATH: ${CONFIGS_FOLDER}/autoscaler-prod_hx.yml
  # Config prod_hh
  CONFIG_PROD_HH_FILE_PATH: ${CONFIGS_FOLDER}/prod_hh.yml
  CONFIG_GUNICORN_PROD_HH_FILE_PATH: ${CONFIGS_FOLDER}/prod_hh.gunicorn.config.py
  INGRESS_PROD_HH_FILE_PATH: ${CONFIGS_FOLDER}/ingress-prod_hh.yml
  AUTOSCALER_PROD_HH_FILE_PATH: ${CONFIGS_FOLDER}/autoscaler-prod_hh.yml

image: docker:latest

services:
  - docker:dind

stages:
  - build_for_staging
  - prepare_config_tests
  - test_and_qa
  - prepare_config_staging
  - deploy_to_staging
  - test_staging
  - prepare_config_hx
  - deploy_to_prod_hx
  - test_prod_hx
  - prepare_config_hh
  - deploy_to_prod_hh
  - test_prod_hh
  - functional_tests_prod_public


# ----------------------------------------------------------------------------------------------------------------------
# build
# ----------------------------------------------------------------------------------------------------------------------
build_docker_image_for_staging:
  image:
    name: docker:latest
    entrypoint: ["/bin/sh", "-c"]
  stage: build_for_staging
  only:
    - staging
  variables:
    DOCKER_HOST: tcp://docker:2375
  script:
    - set -x
    - echo 'building!'
    - docker version # verify docker cli is there. Also prints server info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - echo building ${SERVER_IMAGE_TAG}
    - sed -i "s~<UID>~${STATIC_FILES_UID}~g" Dockerfile-Staging
    - sed -i "s~<GID>~${STATIC_FILES_GID}~g" Dockerfile-Staging
    - docker build --tag ${SERVER_IMAGE_TAG} -f Dockerfile-Staging .
    - docker push ${SERVER_IMAGE_TAG}
    - sed -i "s~<UID>~${STATIC_FILES_UID}~g" Dockerfile-Prod
    - sed -i "s~<GID>~${STATIC_FILES_GID}~g" Dockerfile-Prod
    - docker build --tag ${LATEST_PROD_IMAGE_TAG} -f Dockerfile-Prod .
    - docker push ${LATEST_PROD_IMAGE_TAG}

## ----------------------------------------------------------------------------------------------------------------------
## QA
## ----------------------------------------------------------------------------------------------------------------------
prepare_config_tests:
  stage: prepare_config_tests
  only:
    - staging
  image:
    name: alpine/git
    entrypoint: ["/bin/sh", "-c"]
  script:
    - set -x
    - mkdir -p ${CONFIGS_FOLDER}
    - git clone https://${CONFIG_DEPLOY_GITLAB_USERNAME}:${CONFIG_DEPLOY_GITLAB_TOKEN}@${CONFIGURATIONS_REPO} ${CONFIGS_FOLDER}
  artifacts:
    paths:
      - ${CONFIG_UNIT_TESTS_FILE_PATH}

pylint:
  stage: test_and_qa
  only:
    - staging
  image:
    name: $SERVER_IMAGE_TAG
    entrypoint: [""]
  script:
    - set -x
    - echo 'activate these tests some day'
    - exit 0
#    - find . -iname "*.py" | xargs pylint

## ---------------------------------------------------------------------------------------------------------------------
## Tests
## ---------------------------------------------------------------------------------------------------------------------

unit_tests:
  stage: test_and_qa
  only:
    - staging
  image:
    name: $SERVER_IMAGE_TAG
    entrypoint: [""]
  script:
    - set -x
    - CONFIG_FILE_PATH=${CONFIG_UNIT_TESTS_FILE_PATH} python manage.py test

javascript_tests:
  stage: test_and_qa
  only:
    - staging
  image:
    name: $SERVER_IMAGE_TAG
    entrypoint: [""]
  script:
    - set -x
    - echo 'activate these tests some day'
    - exit 0

#
### ----------------------------------------------------------------------------------------------------------------------
### Deployment to staging
### ----------------------------------------------------------------------------------------------------------------------
prepare_config_staging:
  stage: prepare_config_staging
  image:
    name: alpine/git
    entrypoint: ["/bin/sh", "-c"]
  only:
    - staging
  script:
    - set -x
    - rm -rf ${CONFIGS_FOLDER} || true
    - mkdir -p ${CONFIGS_FOLDER}
    - git clone https://${CONFIG_DEPLOY_GITLAB_USERNAME}:${CONFIG_DEPLOY_GITLAB_TOKEN}@${CONFIGURATIONS_REPO} ${CONFIGS_FOLDER}
  artifacts:
    paths:
      - ${CONFIG_STAGING_FILE_PATH}
      - ${CONFIG_GUNICORN_STAGING_FILE_PATH}
      - ${INGRESS_STAGING_FILE_PATH}
      - ${AUTOSCALER_STAGING_FILE_PATH}

deploy_to_staging:
  stage: deploy_to_staging
  image:
    name: lachlanevenson/k8s-kubectl:latest
    entrypoint: ["/bin/sh", "-c"]
  only:
    - staging
  environment:
    name: staging
    url: ${SERVER_URL_STAGING}
  script:
  - set -x
  - echo "$KUBE_CA_PEM_HX" > "$(pwd)/kube.ca.pem"
  - kubectl config set-cluster ${KUBE_CLUS_NAME_HX} --server="${KUBE_URL_HX}" --certificate-authority="$(pwd)/kube.ca.pem"
  - kubectl config set-credentials ${KUBE_USER_HX} --token="${KUBE_TOKEN_HX}"
  - kubectl config set-context ${CHEMBL_NS_STAGING} --cluster=${KUBE_CLUS_NAME_HX} --user=${KUBE_USER_HX}
  - kubectl config use-context ${CHEMBL_NS_STAGING}
  - echo ${CHEMBL_NS_STAGING} ${KUBE_URL_HX} ${KUBE_CLUS_NAME_HX} ${KUBE_USER_HX}
  - kubectl get pods -n ${CHEMBL_NS_STAGING}
  - kubectl create secret generic ${RUN_CONFIG_SECRET_NAME_STAGING} --from-file=RUN_CONFIG.yml=${CONFIG_STAGING_FILE_PATH} -o yaml -n ${CHEMBL_NS_STAGING} --dry-run=client | kubectl replace -f -
  - kubectl create secret generic ${GUNICORN_CONFIG_SECRET_NAME_STAGING} --from-file=GUNICORN_CONFIG.py=${CONFIG_GUNICORN_STAGING_FILE_PATH} -o yaml -n ${CHEMBL_NS_STAGING} --dry-run=client | kubectl replace -f -
  - cat ${CONFIG_STAGING_FILE_PATH}
  - cat ${CONFIG_GUNICORN_STAGING_FILE_PATH}
  - sed -i "s~<NAMESPACE>~${CHEMBL_NS_STAGING}~g" k8s-deployment.yaml
  - sed -i "s~<NUM_REPLICAS>~${NUM_REPLICAS_STAGING}~g" k8s-deployment.yaml
  - sed -i "s~<STATICS_UID>~${STATIC_FILES_UID}~g" k8s-deployment.yaml
  - sed -i "s~<STATICS_GID>~${STATIC_FILES_GID}~g" k8s-deployment.yaml
  - sed -i "s~<HTTP_PROXY>~${HTTP_PROXY_HX}~g" k8s-deployment.yaml
  - sed -i "s~<HTTPS_PROXY>~${HTTPS_PROXY_HX}~g" k8s-deployment.yaml
  - sed -i "s~<NO_PROXY>~${NO_PROXY_HH_DEFAULT}~g" k8s-deployment.yaml
  - sed -i "s~<CPU_LIMIT>~${CPU_LIMIT_STAGING}~g" k8s-deployment.yaml
  - sed -i "s~<CPU_REQUESTED>~${CPU_REQUESTED_STAGING}~g" k8s-deployment.yaml
  - sed -i "s~<SERVER_IMAGE_TAG>~${SERVER_IMAGE_TAG}~g" k8s-deployment.yaml
  - sed -i "s~<RUN_CONFIG_SECRET_NAME>~${RUN_CONFIG_SECRET_NAME_STAGING}~g" k8s-deployment.yaml
  - sed -i "s~<GUNICORN_CONFIG_SECRET_NAME>~${GUNICORN_CONFIG_SECRET_NAME_STAGING}~g" k8s-deployment.yaml
  - cat k8s-deployment.yaml
  - kubectl apply -n ${CHEMBL_NS_STAGING} -f k8s-deployment.yaml
  - kubectl get pods -n ${CHEMBL_NS_STAGING}
  - cat ${INGRESS_STAGING_FILE_PATH}
  - kubectl apply -n ${CHEMBL_NS_STAGING} -f ${INGRESS_STAGING_FILE_PATH}
  - kubectl describe ingress -n ${CHEMBL_NS_STAGING}
  - cat ${AUTOSCALER_STAGING_FILE_PATH}
  - kubectl apply -n ${CHEMBL_NS_STAGING} -f ${AUTOSCALER_STAGING_FILE_PATH}


## ----------------------------------------------------------------------------------------------------------------------
## Test staging
## ----------------------------------------------------------------------------------------------------------------------
functional_tests:
  stage: test_staging
  image:
    name: $SERVER_IMAGE_TAG
    entrypoint: [""]
  only:
    - staging
  environment:
    name: staging
    url: ${SERVER_URL_STAGING}
  script:
  - set -x
  - echo 'Implement this soon!'
  - exit 0

### ----------------------------------------------------------------------------------------------------------------------
### Deployment to prod hx
### ----------------------------------------------------------------------------------------------------------------------
prepare_config_prod_hx:
  stage: prepare_config_hx
  image:
    name: alpine/git
    entrypoint: ["/bin/sh", "-c"]
  only:
    - master
  script:
    - rm -rf ${CONFIGS_FOLDER} || true
    - mkdir -p ${CONFIGS_FOLDER}
    - git clone https://${CONFIG_DEPLOY_GITLAB_USERNAME}:${CONFIG_DEPLOY_GITLAB_TOKEN}@${CONFIGURATIONS_REPO} ${CONFIGS_FOLDER}
  artifacts:
    paths:
      - ${CONFIG_PROD_HX_FILE_PATH}
      - ${CONFIG_GUNICORN_PROD_HX_FILE_PATH}
      - ${INGRESS_PROD_HX_FILE_PATH}
      - ${AUTOSCALER_PROD_HX_FILE_PATH}

deploy_to_prod_hx:
  stage: deploy_to_prod_hx
  image:
    name: lachlanevenson/k8s-kubectl:latest
    entrypoint: ["/bin/sh", "-c"]
  only:
    - master
  environment:
    name: prod_hx
  script:
    - set -x
    - echo "$KUBE_CA_PEM_HX" > "$(pwd)/kube.ca.pem"
    - kubectl config set-cluster ${KUBE_CLUS_NAME_HX} --server="${KUBE_URL_HX}" --certificate-authority="$(pwd)/kube.ca.pem"
    - kubectl config set-credentials ${KUBE_USER_HX} --token="${KUBE_TOKEN_HX}"
    - kubectl config set-context ${CHEMBL_NS_PROD} --cluster=${KUBE_CLUS_NAME_HX} --user=${KUBE_USER_HX}
    - kubectl config use-context ${CHEMBL_NS_PROD}
    - echo ${CHEMBL_NS_PROD} ${KUBE_URL_HX} ${KUBE_CLUS_NAME_HX} ${KUBE_USER_HX}
    - kubectl get pods -n ${CHEMBL_NS_PROD}
    - kubectl create secret generic ${RUN_CONFIG_SECRET_NAME_PROD_HX} --from-file=RUN_CONFIG.yml=${CONFIG_PROD_HX_FILE_PATH} -o yaml -n ${CHEMBL_NS_PROD} --dry-run=client | kubectl create -f -
    - kubectl create secret generic ${GUNICORN_CONFIG_SECRET_NAME_PROD_HX} --from-file=GUNICORN_CONFIG.py=${CONFIG_GUNICORN_PROD_HX_FILE_PATH} -o yaml -n ${CHEMBL_NS_PROD} --dry-run=client | kubectl create -f -
    - cat ${CONFIG_PROD_HX_FILE_PATH}
    - cat ${CONFIG_GUNICORN_PROD_HX_FILE_PATH}
    - sed -i "s~<NAMESPACE>~${CHEMBL_NS_PROD}~" k8s-deployment.yaml
    - sed -i "s~<NUM_REPLICAS>~${NUM_REPLICAS_PROD_HX}~" k8s-deployment.yaml
    - sed -i "s~<CPU_LIMIT>~${CPU_LIMIT_PROD_HX}~" k8s-deployment.yaml
    - sed -i "s~<CPU_REQUESTED>~${CPU_REQUESTED_PROD_HX}~" k8s-deployment.yaml
    - sed -i "s~<SERVER_IMAGE_TAG>~${SERVER_IMAGE_TAG}~" k8s-deployment.yaml
    - sed -i "s~<RUN_CONFIG_SECRET_NAME>~${RUN_CONFIG_SECRET_NAME_PROD_HX}~" k8s-deployment.yaml
    - sed -i "s~<GUNICORN_CONFIG_SECRET_NAME>~${GUNICORN_CONFIG_SECRET_NAME_PROD_HX}~" k8s-deployment.yaml
    - cat k8s-deployment.yaml
    - kubectl apply -n ${CHEMBL_NS_PROD} -f k8s-deployment.yaml
    - kubectl get pods -n ${CHEMBL_NS_PROD}
    - cat ${INGRESS_PROD_HX_FILE_PATH}
    - kubectl apply -n ${CHEMBL_NS_PROD} -f ${INGRESS_PROD_HX_FILE_PATH}
    - kubectl describe ingress -n ${CHEMBL_NS_PROD}
    - cat ${AUTOSCALER_PROD_HX_FILE_PATH}
    - kubectl apply -n ${CHEMBL_NS_PROD} -f ${AUTOSCALER_PROD_HX_FILE_PATH}

functional_tests_prod_hx:
  stage: test_prod_hx
  image:
    name: $SERVER_IMAGE_TAG
    entrypoint: [""]
  only:
  - master
  script:
  - set -x
  - sleep 30 # Give some time for the deployment to take effect.
  - echo 'Enable this soon!'
#  - functional_tests/run_functional_tests.py ${SERVER_URL_PROD_HX} https://wwwdev.ebi.ac.uk/chembl/interface_api/delayed_jobs

## ----------------------------------------------------------------------------------------------------------------------
## Deployment to prod hh
## ----------------------------------------------------------------------------------------------------------------------
prepare_config_prod_hh:
  stage: prepare_config_hh
  image:
    name: alpine/git
    entrypoint: ["/bin/sh", "-c"]
  only:
    - master
  script:
    - rm -rf ${CONFIGS_FOLDER} || true
    - mkdir -p ${CONFIGS_FOLDER}
    - git clone https://${CONFIG_DEPLOY_GITLAB_USERNAME}:${CONFIG_DEPLOY_GITLAB_TOKEN}@${CONFIGURATIONS_REPO} ${CONFIGS_FOLDER}
    - ls ${CONFIGS_FOLDER}
  artifacts:
    paths:
      - ${CONFIG_PROD_HH_FILE_PATH}
      - ${CONFIG_GUNICORN_PROD_HH_FILE_PATH}
      - ${INGRESS_PROD_HH_FILE_PATH}
      - ${AUTOSCALER_PROD_HH_FILE_PATH}

deploy_to_prod_hh:
  stage: deploy_to_prod_hh
  image:
    name: lachlanevenson/k8s-kubectl:latest
    entrypoint: ["/bin/sh", "-c"]
  only:
    - master
  environment:
    name: prod_hh
  script:
    - set -x
    - echo "$KUBE_CA_PEM_HH" > "$(pwd)/kube.ca.pem"
    - kubectl config set-cluster ${KUBE_CLUS_NAME_HH} --server="${KUBE_URL_HH}" --certificate-authority="$(pwd)/kube.ca.pem"
    - kubectl config set-credentials ${KUBE_USER_HH} --token="${KUBE_TOKEN_HH}"
    - kubectl config set-context ${CHEMBL_NS_PROD} --cluster=${KUBE_CLUS_NAME_HH} --user=${KUBE_USER_HH}
    - kubectl config use-context ${CHEMBL_NS_PROD}
    - echo ${CHEMBL_NS_PROD} ${KUBE_URL_HH} ${KUBE_CLUS_NAME_HH} ${KUBE_USER_HH}
    - kubectl get pods -n ${CHEMBL_NS_PROD}
    - kubectl create secret generic ${RUN_CONFIG_SECRET_NAME_PROD_HH} --from-file=RUN_CONFIG.yml=${CONFIG_PROD_HH_FILE_PATH} -o yaml -n ${CHEMBL_NS_PROD} --dry-run=client | kubectl replace -f -
    - kubectl create secret generic ${GUNICORN_CONFIG_SECRET_NAME_PROD_HH} --from-file=GUNICORN_CONFIG.py=${CONFIG_GUNICORN_PROD_HH_FILE_PATH} -o yaml -n ${CHEMBL_NS_PROD} --dry-run=client | kubectl replace -f -
    - cat ${CONFIG_PROD_HH_FILE_PATH}
    - cat ${CONFIG_GUNICORN_PROD_HH_FILE_PATH}
    - sed -i "s~<NAMESPACE>~${CHEMBL_NS_PROD}~" k8s-deployment.yaml
    - sed -i "s~<NUM_REPLICAS>~${NUM_REPLICAS_PROD_HH}~" k8s-deployment.yaml
    - sed -i "s~<SERVER_IMAGE_TAG>~${SERVER_IMAGE_TAG}~" k8s-deployment.yaml
    - sed -i "s~<CPU_LIMIT>~${CPU_LIMIT_PROD_HH}~" k8s-deployment.yaml
    - sed -i "s~<CPU_REQUESTED>~${CPU_REQUESTED_PROD_HH}~" k8s-deployment.yaml
    - sed -i "s~<RUN_CONFIG_SECRET_NAME>~${RUN_CONFIG_SECRET_NAME_PROD_HH}~" k8s-deployment.yaml
    - sed -i "s~<GUNICORN_CONFIG_SECRET_NAME>~${GUNICORN_CONFIG_SECRET_NAME_PROD_HH}~" k8s-deployment.yaml
    - cat k8s-deployment.yaml
    - kubectl apply -n ${CHEMBL_NS_PROD} -f k8s-deployment.yaml
    - kubectl get pods -n ${CHEMBL_NS_PROD}
    - cat ${INGRESS_PROD_HH_FILE_PATH}
    - kubectl apply -n ${CHEMBL_NS_PROD} -f ${INGRESS_PROD_HH_FILE_PATH}
    - kubectl describe ingress -n ${CHEMBL_NS_PROD}
    - cat ${AUTOSCALER_PROD_HH_FILE_PATH}
    - kubectl apply -n ${CHEMBL_NS_PROD} -f ${AUTOSCALER_PROD_HH_FILE_PATH}

functional_tests_prod_hh:
  stage: test_prod_hh
  image:
    name: $SERVER_IMAGE_TAG
    entrypoint: [""]
  only:
  - master
  script:
  - set -x
  - echo 'Enable this soon!'
#  - sleep 30 # Give some time for the deployment to take effect.
#  - functional_tests/run_functional_tests.py ${SERVER_URL_PROD_HH} https://www.ebi.ac.uk/chembl/interface_api/delayed_jobs

# ----------------------------------------------------------------------------------------------------------------------
# Test prod public url
# ----------------------------------------------------------------------------------------------------------------------
functional_tests_prod_public:
  stage: functional_tests_prod_public
  image:
    name: $SERVER_IMAGE_TAG
    entrypoint: [""]
  only:
  - master
  script:
  - set -x
  - echo 'enable this soon!'
#  - sleep 30 # Give some time for the deployment to take effect.
#  - functional_tests/run_functional_tests.py ${SERVER_URL_PROD_PUBLIC} https://www.ebi.ac.uk/chembl/interface_api/delayed_jobs
