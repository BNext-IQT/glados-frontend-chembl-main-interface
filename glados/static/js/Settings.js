// Generated by CoffeeScript 1.4.0
var Settings, baseNameSpace, glados,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Settings = {
  WS_HOSTNAME: 'https://www.ebi.ac.uk/',
  WS_BASE_URL: 'https://www.ebi.ac.uk/chembl/api/data/',
  BEAKER_BASE_URL: 'https://www.ebi.ac.uk/chembl/api/utils/',
  WS_DEV_BASE_URL: 'https://wwwdev.ebi.ac.uk/chembl/api/data/',
  SEARCH_INPUT_DEBOUNCE_TIME: 600,
  TABLE_PAGE_SIZES: [5, 10, 20, 25, 50, 100],
  CARD_PAGE_SIZES: [6, 12],
  EMBED_BASE_URL: "glados-ebitest.rhcloud.com/",
  EMBL_GREEN: '#9fcc3b',
  EMBL_BLUE: '#008cb5',
  VISUALISATION_RED_MIN: '#f44336',
  VISUALISATION_RED_MAX: '#b71c1c',
  VISUALISATION_TEAL_MIN: '#e0f2f1',
  VISUALISATION_TEAL_MAX: '#004d40',
  VISUALISATION_GREY_BASE: '#9e9e9e',
  VISUALISATION_CARD_GREY: '#fafafa',
  VISUALISATION_GREEN_MIN: '#e8f5e9',
  RESPONSIVE_REPAINT_WAIT: 300
};

Settings.ROOT_URL_PATH = "/";

Settings.SEARCH_RESULTS_PAGE = Settings.ROOT_URL_PATH + 'search_results';

Settings.SEARCH_RESULTS_PAGE_ADVANCED_PATH = 'advanced_search';

Settings.SEARCH_RESULT_URL_REGEXP = new RegExp('^' + Settings.SEARCH_RESULTS_PAGE + '(/' + Settings.SEARCH_RESULTS_PAGE_ADVANCED_PATH + ')?/(.*?)$');

baseNameSpace = {
  glados: {}
};

glados = baseNameSpace.glados;

glados.getNameSpace = function(nameSpace) {
  var curNS, nsI, nsParts, _i, _len;
  nsParts = nameSpace.split('.');
  curNS = baseNameSpace;
  for (_i = 0, _len = nsParts.length; _i < _len; _i++) {
    nsI = nsParts[_i];
    if (__indexOf.call(_.keys(curNS), nsI) < 0) {
      curNS[nsI] = {};
    }
    curNS = curNS[nsI];
  }
  return curNS;
};

glados.importFromNameSpace = function(nameSpace, objectName) {
  var ns;
  ns = glados.getNameSpace(nameSpace);
  return ns[objectName];
};

glados.useNameSpace = function(nameSpace, extension) {
  var extIName, ns, _i, _len, _ref, _results;
  ns = glados.getNameSpace(nameSpace);
  _ref = _.keys(extension);
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    extIName = _ref[_i];
    _results.push(ns[extIName] = extension[extIName]);
  }
  return _results;
};

glados.logNameSpaceTree = function(curNS, path) {
  var nodeIName, _i, _len, _ref, _results;
  if (_.isUndefined(curNS)) {
    curNS = baseNameSpace;
    path = "";
  }
  if (_.isObject(curNS) && _.keys(curNS).length > 0) {
    _ref = _.keys(curNS);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      nodeIName = _ref[_i];
      if (nodeIName && nodeIName[0] !== '_') {
        _results.push(glados.logNameSpaceTree(curNS[nodeIName], path + "." + nodeIName));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  } else {
    return console.log(path + ":" + typeof curNS);
  }
};

glados.logGladosSettings = function() {
  var keyI, _i, _len, _ref;
  console.log("---BEGIN GLaDOS JS ENVIRONMENT SETTINGS----------------------------------------------------------------");
  _ref = _.keys(Settings);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    keyI = _ref[_i];
    console.log(keyI + ":" + Settings[keyI]);
  }
  console.log("---END GLaDOS JS ENVIRONMENT SETTINGS------------------------------------------------------------------");
  console.log("---BEGIN GLaDOS LOADED NAMESPACES----------------------------------------------------------------------");
  glados.logNameSpaceTree();
  console.log("---END GLaDOS LOADED NAMESPACES------------------------------------------------------------------------");
  return console.log("Play nice and there will be CAKE!\n.\n.\n.\nThe CAKE is real, I promise!");
};
