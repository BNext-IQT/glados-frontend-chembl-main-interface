// Generated by CoffeeScript 1.4.0
var initCNCView, initCompFeaturesView, initCompMechanismsOfActionView, initCompMoleculeFormsListView, initCompRepsView, initCompound, initCompoundImageView, initMechanismOfAction, initMechanismOfActionList, initMechanismOfActionRowView, initMoleculeFormsList, initPieView;

initCompound = function(chembl_id) {
  var compound;
  compound = new Compound({
    molecule_chembl_id: chembl_id
  });
  compound.url = 'https://www.ebi.ac.uk/chembl/api/data/molecule/' + chembl_id + '.json';
  return compound;
};

/* *
  * Initializes a molecule forms list given a member compound (not necessarily the parent!)
  * For now, it lazy-loads each of the compounds
  * @param {Compound} member_compound, the list of compounds
  * @return {CompoundList} the list that has been created
*/


initMoleculeFormsList = function(member_compound) {
  var compoundList;
  compoundList = new CompoundList;
  compoundList.original_compound = member_compound;
  compoundList.origin = 'molecule_forms';
  compoundList.url = 'https://www.ebi.ac.uk/chembl/api/data/molecule_form/' + member_compound.get('molecule_chembl_id') + '.json';
  return compoundList;
};

initMechanismOfAction = function(mechanism_id) {
  var mechanismOfAction;
  mechanismOfAction = new MechanismOfAction({
    mec_id: mechanism_id
  });
  mechanismOfAction.url = 'https://www.ebi.ac.uk/chembl/api/data/mechanism/' + mechanism_id + '.json';
  return mechanismOfAction;
};

initMechanismOfActionList = function(from_mol_chembl_id) {
  var mechanismOfActionList;
  mechanismOfActionList = new MechanismOfActionList;
  mechanismOfActionList.url = 'https://www.ebi.ac.uk/chembl/api/data/mechanism.json?molecule_chembl_id=' + from_mol_chembl_id;
  return mechanismOfActionList;
};

/* *
  * Initializes the CNCView
  * @param {Compound} model, base model for the view
  * @param {JQuery} top_level_elem element that renders the model.
  * @return {CompoundNameClassificationView} the view that has been created
*/


initCNCView = function(model, top_level_elem) {
  var cncView;
  cncView = new CompoundNameClassificationView({
    model: model,
    el: top_level_elem
  });
  return cncView;
};

/* *
  * Initializes the Compound Image view, the one that is in charge of the compound main image
  * and the buttons that allow the options for it
  * @param {Compound} model, base model for the view
  * @param {JQuery} top_level_elem element that renders the model.
  * @return {CompoundNameClassificationView} the view that has been created
*/


initCompoundImageView = function(model, top_level_elem) {
  var compImgView;
  compImgView = new CompoundImageView({
    model: model,
    el: top_level_elem
  });
  return compImgView;
};

/* *
  * Initializes de Compound Representations View
  * @param {Compound} model, base model for the view
  * @param {JQuery} element that renders the model.
  * @return {CompoundNameClassificationView} the view that has been created
*/


initCompRepsView = function(model, top_level_elem) {
  var compRepsView;
  compRepsView = new CompoundRepresentationsView({
    model: model,
    el: top_level_elem
  });
  return compRepsView;
};

/* *
  * Initializes de MechanismOfActionRowView View, This view renders a row of a table
  * from the information on the mechanism of action.
  * @param {Compound} model, base model for the view
  * @return {MechanismOfActionRowView} the view that has been created
*/


initMechanismOfActionRowView = function(model) {
  var mechanismOfActionRowView;
  mechanismOfActionRowView = new MechanismOfActionRowView({
    model: model
  });
  return mechanismOfActionRowView;
};

/* *
  * Initializes de MechanismOfActionRowTable View, This view knows all the mechanisms of action from a compound
  * @param {MechanismOfActionList} mech_of_act_list, list of mechanisms of action
  * @param {JQuery} top_level_elem element that renders the model.
  * @return {MechanismOfActionTableView} the view that has been created
*/


initCompMechanismsOfActionView = function(mech_of_action_list, top_level_elem) {
  var compoundMechanismsOfActionView;
  compoundMechanismsOfActionView = new CompoundMechanismsOfActionView({
    collection: mech_of_action_list,
    el: top_level_elem
  });
  return compoundMechanismsOfActionView;
};

/* *
  * Initializes de Compound Featues View
  * @param {Compound} model, base model for the view
  * @param {JQuery} element that renders the model.
  * @return {CompoundNameClassificationView} the view that has been created
*/


initCompFeaturesView = function(model, top_level_elem) {
  var compFeaturesView;
  compFeaturesView = new CompoundFeaturesView({
    model: model,
    el: top_level_elem
  });
  return compFeaturesView;
};

/* *
  * Initializes de CompoundMoleculeFormsListView, This view knows all the alternate forms of a compound
  * @param {CompoundList} compound_list, list of compounds
  * @param {JQuery} top_level_elem element for this view.
  * @return {CompoundMoleculeFormsListView} the view that has been created
*/


initCompMoleculeFormsListView = function(compound_list, top_level_elem) {
  var compoundMoleculeFormsListView;
  compoundMoleculeFormsListView = new CompoundMoleculeFormsListView({
    collection: compound_list,
    el: top_level_elem
  });
  return compoundMoleculeFormsListView;
};

initPieView = function() {
  var pieview;
  pieview = new PieView;
  console.log(pieview);
  return pieview.render();
};
