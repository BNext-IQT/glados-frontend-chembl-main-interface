// Generated by CoffeeScript 1.4.0
var CompoundTargetMatrixView;

CompoundTargetMatrixView = Backbone.View.extend(ResponsiviseViewExt).extend({
  initialize: function() {
    var updateViewProxy;
    this.model.on('change', this.render, this);
    this.$vis_elem = $('#BCK-CompTargMatrixContainer');
    return updateViewProxy = this.setUpResponsiveRender();
  },
  render: function() {
    console.log('render!');
    this.paintMatrix();
    $(this.el).find('select').material_select();
    return $('.tooltipped').tooltip();
  },
  paintMatrix: function() {
    var buildNumericColourScale, buildTextColourScale, col, columns, columnsIndex, currentProperty, defineColourScale, elemWidth, fillColour, fillRow, getCellColour, getCellTooltip, getColumnTooltip, getRowTooltip, getXCoord, getYCoord, handleZoom, height, i, inferPropsType, inferPropsType2, j, links, mainContainer, margin, matrix, numColumns, numRows, resetZoom, row, rows, rowsIndex, sum, svg, width, zoom, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _results, _results1;
    console.log('painting matrix');
    matrix = {
      "columns": [
        {
          "name": "C1",
          "originalIndex": 0,
          "currentPosition": 0
        }, {
          "name": "C2",
          "originalIndex": 1,
          "currentPosition": 1
        }, {
          "name": "C3",
          "originalIndex": 2,
          "currentPosition": 2
        }
      ],
      "rows": [
        {
          "name": "T1",
          "originalIndex": 0,
          "currentPosition": 0
        }, {
          "name": "T2",
          "originalIndex": 1,
          "currentPosition": 1
        }, {
          "name": "T3",
          "originalIndex": 2,
          "currentPosition": 2
        }, {
          "name": "T4",
          "originalIndex": 3,
          "currentPosition": 3
        }
      ],
      "links": {
        0: {
          0: {
            'pchembl': 1,
            'num_bioactivities': 0,
            'assay_type': 'U',
            'pchembl_value': 12,
            molecule_chembl_id: 'C1',
            target_chembl_id: 'T1',
            'published_value': 120
          },
          1: {
            pchembl: 0,
            'num_bioactivities': 10,
            'assay_type': 'P',
            'pchembl_value': 11,
            molecule_chembl_id: 'C2',
            target_chembl_id: 'T1',
            'published_value': 80
          },
          2: {
            pchembl: 2,
            'num_bioactivities': 0,
            'assay_type': 'B',
            'pchembl_value': 10,
            molecule_chembl_id: 'C3',
            target_chembl_id: 'T1',
            'published_value': 40
          }
        },
        1: {
          0: {
            pchembl: 0,
            'num_bioactivities': 0,
            'assay_type': 'A',
            'pchembl_value': 9,
            molecule_chembl_id: 'C1',
            target_chembl_id: 'T2',
            'published_value': 110
          },
          1: {
            pchembl: 3,
            'num_bioactivities': 20,
            'assay_type': 'T',
            'pchembl_value': 8,
            molecule_chembl_id: 'C2',
            target_chembl_id: 'T2',
            'published_value': 70
          },
          2: {
            pchembl: 0,
            'num_bioactivities': 0,
            'assay_type': 'F',
            'pchembl_value': 7,
            molecule_chembl_id: 'C3',
            target_chembl_id: 'T2',
            'published_value': 30
          }
        },
        2: {
          0: {
            pchembl: 4,
            'num_bioactivities': 0,
            'assay_type': 'U',
            'pchembl_value': 6,
            molecule_chembl_id: 'C1',
            target_chembl_id: 'T3',
            'published_value': 10
          },
          1: {
            pchembl: 0,
            'num_bioactivities': 30,
            'assay_type': 'P',
            'pchembl_value': 5,
            molecule_chembl_id: 'C2',
            target_chembl_id: 'T3',
            'published_value': 60
          },
          2: {
            pchembl: 0,
            'num_bioactivities': 0,
            'assay_type': 'B',
            'pchembl_value': 4,
            molecule_chembl_id: 'C3',
            target_chembl_id: 'T3',
            'published_value': 20
          }
        },
        3: {
          0: {
            pchembl: 0,
            'num_bioactivities': 0,
            'assay_type': 'A',
            'pchembl_value': 3,
            molecule_chembl_id: 'C1',
            target_chembl_id: 'T4',
            'published_value': 90
          },
          1: {
            pchembl: 0,
            'num_bioactivities': 40,
            'assay_type': 'T',
            'pchembl_value': 2,
            molecule_chembl_id: 'C2',
            target_chembl_id: 'T4',
            'published_value': 50
          },
          2: {
            pchembl: 5,
            'num_bioactivities': 0,
            'assay_type': 'F',
            'pchembl_value': 1,
            molecule_chembl_id: 'C3',
            target_chembl_id: 'T4',
            'published_value': 100
          }
        }
      }
    };
    currentProperty = 'pchembl_value';
    margin = {
      top: 150,
      right: 0,
      bottom: 10,
      left: 90
    };
    elemWidth = $(this.el).width();
    width = 0.8 * elemWidth;
    height = width;
    mainContainer = d3.select('#' + this.$vis_elem.attr('id'));
    svg = mainContainer.append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    links = matrix.links;
    numColumns = matrix.columns.length;
    numRows = matrix.rows.length;
    console.log('num rows:', numRows);
    console.log('num columns:', numColumns);
    console.log('links:');
    console.log(links);
    _ref = matrix.columns;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      col = _ref[_i];
      j = col.originalIndex;
      sum = 0;
      sum = _.reduce((function() {
        var _results;
        _results = [];
        for (i in links) {
          row = links[i];
          _results.push(row[j]['pchembl_value']);
        }
        return _results;
      })(), function(initial, succesive) {
        return initial + succesive;
      });
      col['pchembl_value_sum'] = sum;
    }
    _ref1 = matrix.rows;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      row = _ref1[_j];
      i = row.originalIndex;
      sum = 0;
      sum = _.reduce((function() {
        var _ref2, _results;
        _ref2 = links[i];
        _results = [];
        for (j in _ref2) {
          col = _ref2[j];
          _results.push(col['pchembl_value']);
        }
        return _results;
      })(), function(initial, succesive) {
        return initial + succesive;
      });
      row['pchembl_value_sum'] = sum;
    }
    rowsIndex = _.indexBy(matrix.rows, 'name');
    columnsIndex = _.indexBy(matrix.columns, 'name');
    svg.append("rect").attr("class", "background").style("fill", "white").attr("width", width).attr("height", height);
    getYCoord = d3.scale.ordinal().domain((function() {
      _results = [];
      for (var _k = 0; 0 <= numRows ? _k <= numRows : _k >= numRows; 0 <= numRows ? _k++ : _k--){ _results.push(_k); }
      return _results;
    }).apply(this)).rangeBands([0, height]);
    getXCoord = d3.scale.ordinal().domain((function() {
      _results1 = [];
      for (var _l = 0; 0 <= numColumns ? _l <= numColumns : _l >= numColumns; 0 <= numColumns ? _l++ : _l--){ _results1.push(_l); }
      return _results1;
    }).apply(this)).rangeBands([0, width]);
    inferPropsType2 = function(currentProperty) {
      var propToType;
      propToType = {
        "assay_type": "string",
        "pchembl_value": "number",
        "published_value": "number"
      };
      return propToType[currentProperty];
    };
    inferPropsType = function(links, currentProperty) {
      var cell, colNum, datum, rowNum, type;
      for (rowNum in links) {
        row = links[rowNum];
        for (colNum in row) {
          cell = row[colNum];
          datum = cell[currentProperty];
          if (datum != null) {
            if (parseInt(datum) !== NaN) {
              return "number";
            }
            type = typeof datum;
            return type;
          }
        }
      }
    };
    buildNumericColourScale = function(links, currentProperty) {
      var cell, colNum, colourDomain, maxVal, minVal, rowNum, scale, value;
      minVal = Number.MAX_VALUE;
      maxVal = Number.MIN_VALUE;
      for (rowNum in links) {
        row = links[rowNum];
        for (colNum in row) {
          cell = row[colNum];
          value = cell[currentProperty];
          if (value > maxVal) {
            maxVal = value;
          }
          if (value < minVal) {
            minVal = value;
          }
        }
      }
      colourDomain = [minVal, maxVal];
      console.log('max value: ', maxVal);
      console.log('min value: ', minVal);
      scale = d3.scale.linear().domain(colourDomain).range(["#FFFFFF", Settings.EMBL_GREEN]);
      return scale;
    };
    buildTextColourScale = function(links, currentProperty) {
      var cell, colNum, domain, rowNum, scale;
      domain = [];
      for (rowNum in links) {
        row = links[rowNum];
        for (colNum in row) {
          cell = row[colNum];
          domain.push(cell[currentProperty]);
        }
      }
      scale = d3.scale.ordinal().domain(domain).range(d3.scale.category20().range());
      return scale;
    };
    defineColourScale = function(links, currentProperty) {
      var scale, type;
      type = inferPropsType2(currentProperty);
      console.log('type is: ', type);
      scale = (function() {
        switch (false) {
          case type !== 'number':
            return buildNumericColourScale(links, currentProperty);
          case type !== 'string':
            return buildTextColourScale(links, currentProperty);
        }
      })();
      console.log('Scale:');
      console.log('domain: ', scale.domain());
      console.log('range: ', scale.range());
      return scale;
    };
    getCellColour = defineColourScale(links, currentProperty);
    fillColour = function(d) {
      if (!(d[currentProperty] != null)) {
        return '#9e9e9e';
      }
      return getCellColour(d[currentProperty]);
    };
    getCellTooltip = function(d) {
      var txt;
      txt = "molecule: " + d.molecule_chembl_id + "\n" + "target: " + d.target_chembl_id + "\n" + currentProperty + ":" + d[currentProperty];
      return txt;
    };
    getRowTooltip = function(d) {
      var txt;
      txt = "target: " + d.name + "\n" + "pchembl_value_sum:" + d['pchembl_value_sum'];
      return txt;
    };
    fillRow = function(row, rowNumber) {
      var cells, columnsList, dataList, rowInMatrix, value, _len2, _m;
      columnsList = matrix.columns;
      rowInMatrix = matrix.rows[rowNumber];
      i = rowInMatrix.originalIndex;
      dataList = [];
      for (_m = 0, _len2 = columnsList.length; _m < _len2; _m++) {
        col = columnsList[_m];
        j = col.originalIndex;
        value = links[i][j];
        dataList.push(value);
      }
      console.log("dataList:", dataList);
      console.log('g elem: ', this);
      cells = d3.select(this).selectAll(".vis-cell").data(dataList).enter().append("rect").attr("class", "vis-cell").attr("x", function(d, colNum) {
        return getXCoord(columnsList[colNum].currentPosition);
      }).attr("width", getXCoord.rangeBand()).attr("height", getYCoord.rangeBand()).style("fill", fillColour);
      return cells.classed('tooltipped', true).attr('data-position', 'bottom').attr('data-delay', '50').attr('data-tooltip', getCellTooltip);
    };
    rows = svg.selectAll('.vis-row').data(matrix.rows).enter().append('g').attr('class', 'vis-row').attr('transform', function(d) {
      return "translate(0, " + getYCoord(d.currentPosition) + ")";
    }).each(fillRow);
    rows.append("line").attr("x2", width);
    rows.append("text").attr("x", -6).attr("y", getYCoord.rangeBand() / 2).attr("dy", ".32em").attr("text-anchor", "end").attr('style', 'font-size:12px;').attr('text-decoration', 'underline').attr('cursor', 'pointer').attr('fill', '#1b5e20').text(function(d, i) {
      return d.name;
    }).classed('tooltipped', true).attr('data-position', 'bottom').attr('data-delay', '50').attr('data-tooltip', getRowTooltip);
    getColumnTooltip = function(d) {
      var txt;
      return txt = "molecule: " + d.name + "\n" + "pchembl_value_sum:" + d['pchembl_value_sum'];
    };
    columns = svg.selectAll(".vis-column").data(matrix.columns).enter().append("g").attr("class", "vis-column").attr("transform", function(d) {
      return "translate(" + getXCoord(d.currentPosition) + ")rotate(-90)";
    });
    columns.append("line").attr("x1", -width);
    columns.append("text").attr("x", 0).attr("y", getXCoord.rangeBand() / 2).attr("dy", ".32em").attr("text-anchor", "start").attr('style', 'font-size:12px;').attr('text-decoration', 'underline').attr('cursor', 'pointer').attr('fill', '#1b5e20').text(function(d, i) {
      return d.name;
    }).classed('tooltipped', true).attr('data-position', 'bottom').attr('data-delay', '50').attr('data-tooltip', getColumnTooltip);
    handleZoom = function() {
      console.log('scale: ' + zoom.scale());
      console.log('translation: ' + zoom.translate());
      getYCoord.rangeBands([0, height * zoom.scale()]);
      getXCoord.rangeBands([0, width * zoom.scale()]);
      svg.selectAll('.vis-row').attr('transform', function(d) {
        return "translate(" + zoom.translate()[0] + ", " + (getYCoord(d.currentPosition) + zoom.translate()[1]) + ")";
      }).selectAll("text").attr("y", getYCoord.rangeBand() / 2.);
      svg.selectAll(".vis-column").attr("transform", function(d) {
        return "translate(" + getXCoord(d.currentPosition) + ")rotate(-90)";
      }).selectAll("text").attr("y", getXCoord.rangeBand() / 2.).attr('transform', function(d) {
        return "translate( " + (-zoom.translate()[1]) + ", " + zoom.translate()[0] + ")";
      });
      return svg.selectAll(".vis-cell").attr("width", getXCoord.rangeBand()).attr("height", getYCoord.rangeBand()).attr("x", function(d, index) {
        return getXCoord(matrix.columns[index % matrix.columns.length].currentPosition);
      });
    };
    zoom = d3.behavior.zoom().on("zoom", handleZoom);
    svg.call(zoom);
    $(this.el).find(".select-property").on("change", function() {
      var t;
      if (!(this.value != null)) {
        return;
      }
      currentProperty = this.value;
      console.log('current colour property: ', currentProperty);
      getCellColour = defineColourScale(links, currentProperty);
      t = svg.transition().duration(1000);
      return t.selectAll(".vis-cell").style("fill", fillColour).attr('data-tooltip', getCellTooltip);
    });
    $(this.el).find(".select-row-sort").on("change", function() {
      var index, newOrders, t, _len2, _m;
      if (!(this.value != null)) {
        return;
      }
      currentProperty = this.value;
      newOrders = _.sortBy(matrix.rows, 'pchembl_value_sum');
      for (index = _m = 0, _len2 = newOrders.length; _m < _len2; index = ++_m) {
        row = newOrders[index];
        rowsIndex[row.name].currentPosition = index;
      }
      t = svg.transition().duration(2500);
      return t.selectAll('.vis-row').attr('transform', function(d) {
        return "translate(" + zoom.translate()[0] + ", " + (getYCoord(d.currentPosition) + zoom.translate()[1]) + ")";
      });
    });
    $(this.el).find(".select-column-sort").on("change", function() {
      var index, newOrders, t, _len2, _m;
      if (!(this.value != null)) {
        return;
      }
      currentProperty = this.value;
      newOrders = _.sortBy(matrix.columns, 'pchembl_value_sum');
      for (index = _m = 0, _len2 = newOrders.length; _m < _len2; index = ++_m) {
        row = newOrders[index];
        columnsIndex[row.name].currentPosition = index;
      }
      t = svg.transition().duration(2500);
      t.selectAll(".vis-column").attr("transform", function(d) {
        return "translate(" + getXCoord(d.currentPosition) + ")rotate(-90)";
      });
      return t.selectAll(".vis-cell").attr("x", function(d, index) {
        return getXCoord(matrix.columns[index % matrix.columns.length].currentPosition);
      });
    });
    resetZoom = function() {
      zoom.scale(1);
      zoom.translate([0, 0]);
      return handleZoom();
    };
    return $(this.el).find(".reset-zoom-btn").click(function() {
      return resetZoom();
    });
  }
});
