// Generated by CoffeeScript 1.4.0
var CompoundResultsGraphView;

CompoundResultsGraphView = Backbone.View.extend(ResponsiviseViewExt).extend({
  initialize: function() {
    var updateViewProxy;
    this.$vis_elem = $('#BCK-CompResultsGraphContainer');
    return updateViewProxy = this.setUpResponsiveRender();
  },
  render: function() {
    this.paintGraph();
    return $(this.el).find('select').material_select();
  },
  paintGraph: function() {
    var COLOUR, LINEAR, ORDINAL, XAXIS, YAXIS, buildLinearNumericScale, buildOrdinalStringScale, calculateDotsCoordinates, calculateTextsCoordinates, currentPropertyColour, currentPropertyX, currentPropertyY, elemWidth, getColourFor, getScaleForProperty, getXCoordFor, getYCoordFor, gridHeight, gridWidth, handleZoom, height, inferPropsType, labelerProperty, mainContainer, molecules, padding, resetZoom, svg, width, xAxis, yAxis, zoom;
    console.log('painting graph');
    molecules = [
      {
        molecule_chembl_id: "CHEMBL8659",
        molecule_type: "Small molecule",
        therapeutic_flag: false,
        molecule_properties: {
          acd_logd: "4.83",
          acd_logp: "7.42",
          acd_most_apka: "4.78",
          acd_most_bpka: null
        },
        max_phase: 2,
        mol_wt: 16.5
      }, {
        molecule_chembl_id: "CHEMBL9960",
        molecule_type: "Small molecule",
        therapeutic_flag: true,
        molecule_properties: {
          acd_logd: "5.33",
          acd_logp: "5.33",
          acd_most_apka: "12.82",
          acd_most_bpka: "3.63"
        },
        max_phase: 3,
        mol_wt: 40.5
      }, {
        molecule_chembl_id: "CHEMBL3545375",
        molecule_type: "Antibody",
        therapeutic_flag: false,
        molecule_properties: null,
        max_phase: 4,
        mol_wt: 140.5
      }, {
        molecule_chembl_id: "CHEMBL6962",
        molecule_type: "Small molecule",
        therapeutic_flag: false,
        molecule_properties: {
          acd_logd: "0.73",
          acd_logp: "2.64",
          acd_most_apka: null,
          acd_most_bpka: "10.01"
        },
        max_phase: 1,
        mol_wt: 32.0
      }, {
        molecule_chembl_id: "CHEMBL1863514",
        molecule_type: "Enzyme",
        therapeutic_flag: true,
        molecule_properties: null,
        max_phase: 2,
        mol_wt: 20.0
      }, {
        molecule_chembl_id: "CHEMBL6995",
        molecule_type: "Small molecule",
        therapeutic_flag: false,
        molecule_properties: {
          acd_logd: "-1.51",
          acd_logp: "0.59",
          acd_most_apka: "13.88",
          acd_most_bpka: "9.43"
        },
        max_phase: 3,
        mol_wt: 25.0
      }
    ];
    padding = {
      right: 60,
      left: 60,
      text_left: 60,
      bottom: 40,
      top: 40
    };
    XAXIS = 'x-axis';
    YAXIS = 'y-axis';
    COLOUR = 'colour';
    ORDINAL = 'ORDINAL';
    LINEAR = 'LINEAR';
    labelerProperty = 'molecule_chembl_id';
    currentPropertyX = 'mol_wt';
    currentPropertyY = 'mol_wt';
    currentPropertyColour = 'mol_wt';
    elemWidth = $(this.el).width();
    height = width = 0.8 * elemWidth;
    gridHeight = height - padding.bottom - padding.top;
    gridWidth = width - padding.left - padding.right;
    mainContainer = d3.select('#' + this.$vis_elem.attr('id')).append('svg').attr('width', width).attr('height', height);
    mainContainer.append("rect").attr("class", "background").attr({
      'fill': 'white'
    }).attr("width", width).attr("height", height).attr('stroke', 'black');
    svg = mainContainer.append('svg').attr('width', width).attr('height', height).append("g");
    inferPropsType = function(dataList) {
      var datum, type, _i, _len;
      for (_i = 0, _len = dataList.length; _i < _len; _i++) {
        datum = dataList[_i];
        if (datum != null) {
          type = typeof datum;
          return type;
        }
      }
    };
    buildLinearNumericScale = function(dataList, axis) {
      var datum, maxVal, minVal, range, scale, scaleDomain, _i, _len;
      minVal = Number.MAX_VALUE;
      maxVal = Number.MIN_VALUE;
      for (_i = 0, _len = dataList.length; _i < _len; _i++) {
        datum = dataList[_i];
        if (datum > maxVal) {
          maxVal = datum;
        }
        if (datum < minVal) {
          minVal = datum;
        }
      }
      scaleDomain = [minVal, maxVal];
      console.log('axis: ', axis);
      range = (function() {
        switch (false) {
          case axis !== XAXIS:
            return [padding.left, width - padding.right];
          case axis !== YAXIS:
            return [height - padding.bottom, padding.top];
          case axis !== COLOUR:
            return ['#ede7f6', '#311b92'];
        }
      })();
      console.log('range: ', range);
      scale = d3.scale.linear().domain(scaleDomain).range(range);
      scale.type = LINEAR;
      return scale;
    };
    buildOrdinalStringScale = function(dataList, axis) {
      var range, scale;
      if (axis === COLOUR) {
        return d3.scale.category20().domain(dataList);
      }
      range = (function() {
        switch (false) {
          case axis !== XAXIS:
            return [padding.text_left, width - padding.right];
          case axis !== YAXIS:
            return [height - padding.bottom, padding.top];
        }
      })();
      scale = d3.scale.ordinal().domain(dataList).rangePoints(range);
      scale.type = ORDINAL;
      return scale;
    };
    getScaleForProperty = function(molecules, property, axis) {
      var dataList, scale, type;
      dataList = _.pluck(molecules, property);
      type = inferPropsType(dataList);
      console.log('type is: ', type);
      scale = (function() {
        switch (false) {
          case type !== 'number':
            return buildLinearNumericScale(dataList, axis);
          case type !== 'string':
            return buildOrdinalStringScale(dataList, axis);
        }
      })();
      return scale;
    };
    getXCoordFor = getScaleForProperty(molecules, currentPropertyX, XAXIS);
    getYCoordFor = getScaleForProperty(molecules, currentPropertyY, YAXIS);
    getColourFor = getScaleForProperty(molecules, currentPropertyColour, COLOUR);
    console.log('color scale range: ', getColourFor.range());
    console.log('color scale domain: ', getColourFor.domain());
    xAxis = d3.svg.axis().scale(getXCoordFor).orient("bottom").innerTickSize(-gridHeight).tickPadding(padding.bottom / 3);
    svg.append("g").attr("class", "x-axis").attr("transform", "translate(0," + (height - padding.bottom) + ")").call(xAxis).append("text").attr("class", "x-axis-label").attr("x", width).attr("y", -6).style("text-anchor", "end").text(currentPropertyX);
    yAxis = d3.svg.axis().scale(getYCoordFor).orient("left").innerTickSize(-gridWidth).tickPadding(padding.left / 3);
    svg.append("g").attr("class", "y-axis").attr("transform", "translate(" + padding.left + ", 0)").call(yAxis).append("text").attr("class", "y-axis-label").attr("x", 0).attr("y", padding.top - 6).text(currentPropertyY);
    calculateDotsCoordinates = function() {
      return svg.selectAll("circle.dot").attr("cx", function(d) {
        return getXCoordFor(d[currentPropertyX]);
      }).attr("cy", function(d) {
        return getYCoordFor(d[currentPropertyY]);
      }).attr("fill", function(d) {
        return getColourFor(d[currentPropertyColour]);
      });
    };
    svg.selectAll("dot").data(molecules).enter().append("circle").attr("class", "dot").attr("r", 10);
    calculateDotsCoordinates();
    calculateTextsCoordinates = function() {
      return svg.selectAll("text.dot-label").attr("transform", function(d) {
        return "translate(" + getXCoordFor(d[currentPropertyX]) + ',' + getYCoordFor(d[currentPropertyY]) + ")";
      });
    };
    svg.selectAll("dot-label").data(molecules).enter().append("text").attr("class", "dot-label").attr("font-size", "10px").text(function(d) {
      return d[labelerProperty];
    });
    calculateTextsCoordinates();
    handleZoom = function() {
      console.log('scale: ' + zoom.scale());
      console.log('translation: ' + zoom.translate());
      svg.select(".x-axis").call(xAxis);
      svg.select(".y-axis").call(yAxis);
      calculateDotsCoordinates();
      return calculateTextsCoordinates();
    };
    zoom = d3.behavior.zoom().x(getXCoordFor).y(getYCoordFor).on("zoom", handleZoom);
    mainContainer.call(zoom);
    $(this.el).find(".select-xaxis").on("change", function() {
      var t;
      if (!(this.value != null)) {
        return;
      }
      currentPropertyX = this.value;
      console.log('x axis: ', currentPropertyX);
      resetZoom();
      getXCoordFor = getScaleForProperty(molecules, currentPropertyX, XAXIS);
      console.log('scale type: ', getXCoordFor.type);
      xAxis.scale(getXCoordFor);
      zoom.x(getXCoordFor);
      t = svg.transition().duration(1000);
      t.selectAll("g.x-axis").call(xAxis);
      t.selectAll('text.x-axis-label').text(currentPropertyX);
      t.selectAll("circle.dot").attr("cx", function(d) {
        return getXCoordFor(d[currentPropertyX]);
      });
      return t.selectAll("text.dot-label").attr("transform", function(d) {
        return "translate(" + getXCoordFor(d[currentPropertyX]) + ',' + getYCoordFor(d[currentPropertyY]) + ")";
      });
    });
    $(this.el).find(".select-yaxis").on("change", function() {
      var t;
      if (!(this.value != null)) {
        return;
      }
      currentPropertyY = this.value;
      console.log('y axis: ', currentPropertyY);
      resetZoom();
      getYCoordFor = getScaleForProperty(molecules, currentPropertyY, YAXIS);
      console.log('scale type: ', getYCoordFor.type);
      yAxis.scale(getYCoordFor);
      zoom.y(getYCoordFor);
      t = svg.transition().duration(1000);
      t.selectAll("g.y-axis").call(yAxis);
      t.selectAll('text.y-axis-label').text(currentPropertyY);
      t.selectAll("circle.dot").attr("cy", function(d) {
        return getYCoordFor(d[currentPropertyY]);
      });
      return t.selectAll("text.dot-label").attr("transform", function(d) {
        return "translate(" + getXCoordFor(d[currentPropertyX]) + ',' + getYCoordFor(d[currentPropertyY]) + ")";
      });
    });
    $(this.el).find(".select-colour").on("change", function() {
      var t;
      if (!(this.value != null)) {
        return;
      }
      currentPropertyColour = this.value;
      console.log('colour axis: ', currentPropertyColour);
      getColourFor = getScaleForProperty(molecules, currentPropertyColour, COLOUR);
      t = svg.transition().duration(1000);
      return t.selectAll("circle.dot").attr("fill", function(d) {
        return getColourFor(d[currentPropertyColour]);
      });
    });
    resetZoom = function() {
      zoom.scale(1);
      zoom.translate([0, 0]);
      return handleZoom();
    };
    return $(this.el).find(".reset-zoom-btn").click(function() {
      return resetZoom();
    });
  }
});
