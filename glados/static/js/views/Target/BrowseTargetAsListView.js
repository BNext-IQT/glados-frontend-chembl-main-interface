// Generated by CoffeeScript 1.4.0
var BrowseTargetAsListView;

BrowseTargetAsListView = Backbone.View.extend({
  initialize: function() {
    return this.model.on('change', this.render, this);
  },
  showPreloader: function() {
    var table;
    $(this.el).find('.preloader-container').show();
    table = $(this.el).find('.tree');
    return table.hide();
  },
  hidePreloader: function() {
    var table;
    $(this.el).find('.preloader-container').hide();
    table = $(this.el).find('.tree');
    return table.show();
  },
  render: function() {
    var all_nodes, counter, indentator, newView, new_elem, new_row, node, num_nodes, percentage, percentage_toShow, table, _i, _j, _len, _ref, _ref1, _results;
    this.setPreloaderWidth('30%');
    all_nodes = this.model.get('all_nodes');
    table = $(this.el).find('.tree');
    table.empty();
    counter = 0;
    num_nodes = all_nodes.models.length;
    _ref = all_nodes.models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      indentator = (function() {
        _results = [];
        for (var _j = 1, _ref1 = node.get('depth'); 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; 1 <= _ref1 ? _j++ : _j--){ _results.push(_j); }
        return _results;
      }).apply(this);
      indentator.pop();
      new_row = Handlebars.compile($('#Handlebars-TargetBrowser-AsList-item').html())({
        id: node.get('id'),
        name: node.get('name'),
        size: node.get('size'),
        indent: indentator,
        is_leaf: node.get('is_leaf')
      });
      new_elem = $(new_row).attr('id', 'rowFor' + node.get('id'));
      table.append(new_elem);
      if (node.get('show') === true) {
        new_elem.show();
      } else {
        new_elem.hide();
      }
      newView = new BrowseTargetAsListNodeView({
        model: node,
        el: new_elem
      });
      counter++;
      percentage = Math.round((counter / num_nodes) * 100);
      if (percentage % 30 === 0) {
        percentage_toShow = (percentage * 0.7) + 30;
        this.setPreloaderWidth(percentage_toShow + '%');
      }
    }
    return this.hidePreloader();
  },
  expandAll: function() {
    return this.model.expandAll();
  },
  collapseAll: function() {
    return this.model.collapseAll();
  },
  selectAll: function() {
    return this.model.selectAll();
  },
  clearSelections: function() {
    return this.model.clearSelections();
  },
  setPreloaderWidth: function(width) {
    var bar;
    bar = $(this.el).find('.preloader-container').find('.determinate');
    bar.attr('style', 'width:' + width);
    return console.log(bar.css('width'));
  }
});
