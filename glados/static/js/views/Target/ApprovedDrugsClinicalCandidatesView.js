// Generated by CoffeeScript 1.4.0
var ApprovedDrugsClinicalCandidatesView;

ApprovedDrugsClinicalCandidatesView = CardView.extend({
  initialize: function() {
    this.collection.on('reset do-repaint sort', this.render, this);
    return this.resource_type = 'Target';
  },
  events: {
    'click .page-selector': 'getPage',
    'change .change-page-size': 'changePageSize',
    'click .sort': 'sortCollection'
  },
  render: function() {
    if (this.collection.size() === 0) {
      $('#ApprovedDrugsAndClinicalCandidates').hide();
      return;
    }
    this.clearTable();
    this.clearList();
    this.fill_template('ADCCTable-large');
    this.fill_template('ADCCUL-small');
    this.fillPaginator();
    this.showVisibleContent();
    this.initEmbedModal('approved_drugs_clinical_candidates');
    this.activateModals();
    return $('select').material_select();
  },
  fill_template: function(elem_id) {
    var adcc, elem, new_row_cont, template, _i, _len, _ref, _results;
    elem = $(this.el).find('#' + elem_id);
    template = $('#' + elem.attr('data-hb-template'));
    _ref = this.collection.getCurrentPage();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      adcc = _ref[_i];
      new_row_cont = Handlebars.compile(template.html())({
        molecule_chembl_id: adcc.get('molecule_chembl_id'),
        pref_name: adcc.get('pref_name'),
        mechanism_of_action: adcc.get('mechanism_of_action'),
        max_phase: adcc.get('max_phase')
      });
      _results.push(elem.append($(new_row_cont)));
    }
    return _results;
  },
  fillPaginator: function() {
    var current_page, elem, first_record, last_page, num, page_size, pages, records_in_page, template;
    elem = $(this.el).find('#ADCCUL-paginator');
    template = $('#' + elem.attr('data-hb-template'));
    current_page = this.collection.getMeta('current_page');
    records_in_page = this.collection.getMeta('records_in_page');
    page_size = this.collection.getMeta('page_size');
    first_record = (current_page - 1) * page_size;
    last_page = first_record + records_in_page;
    pages = (function() {
      var _i, _ref, _results;
      _results = [];
      for (num = _i = 1, _ref = this.collection.getMeta('total_pages'); 1 <= _ref ? _i <= _ref : _i >= _ref; num = 1 <= _ref ? ++_i : --_i) {
        _results.push(num);
      }
      return _results;
    }).call(this);
    elem.html(Handlebars.compile(template.html())({
      pages: pages,
      records_showing: first_record + '-' + last_page,
      total_records: this.collection.getMeta('total_records')
    }));
    this.activateCurrentPageButton();
    return this.enableDisableNextLastButtons();
  },
  clearTable: function() {
    return $('#ADCCTable-large tr:gt(0)').remove();
  },
  clearList: function() {
    return $('#ADCCUL-small').empty();
  },
  getPage: function(event) {
    var clicked, current_page, requested_page_num;
    clicked = $(event.currentTarget);
    if (clicked.hasClass('disabled')) {
      return;
    }
    requested_page_num = clicked.attr('data-page');
    current_page = this.collection.getMeta('current_page');
    if (current_page === requested_page_num) {
      return;
    }
    if (requested_page_num === "previous") {
      requested_page_num = current_page - 1;
    } else if (requested_page_num === "next") {
      requested_page_num = current_page + 1;
    }
    return this.collection.setPage(requested_page_num);
  },
  enableDisableNextLastButtons: function() {
    var current_page, total_pages;
    current_page = parseInt(this.collection.getMeta('current_page'));
    total_pages = parseInt(this.collection.getMeta('total_pages'));
    if (current_page === 1) {
      $(this.el).find("[data-page='previous']").addClass('disabled');
    } else {
      $(this.el).find("[data-page='previous']").removeClass('disabled');
    }
    if (current_page === total_pages) {
      return $(this.el).find("[data-page='next']").addClass('disabled');
    } else {
      return $(this.el).find("[data-page='next']").removeClass('disabled');
    }
  },
  activateCurrentPageButton: function() {
    var current_page;
    current_page = this.collection.getMeta('current_page');
    $(this.el).find('.page-selector').removeClass('active');
    return $(this.el).find("[data-page=" + current_page + "]").addClass('active');
  },
  changePageSize: function(event) {
    var new_page_size, selector;
    selector = $(event.currentTarget);
    new_page_size = selector.val();
    return this.collection.resetPageSize(new_page_size);
  },
  sortCollection: function() {
    return this.collection.sortCollection();
  }
});
