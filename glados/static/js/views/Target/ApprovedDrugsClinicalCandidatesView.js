// Generated by CoffeeScript 1.4.0
var ApprovedDrugsClinicalCandidatesView;

ApprovedDrugsClinicalCandidatesView = CardView.extend(PaginatedViewExt).extend({
  initialize: function() {
    this.collection.on('reset do-repaint sort', this.render, this);
    return this.resource_type = 'Target';
  },
  events: {
    'click .page-selector': 'getPage',
    'change .change-page-size': 'changePageSize',
    'click .sort': 'sortCollection',
    'input .search': 'setSearch'
  },
  render: function() {
    if (this.collection.size() === 0) {
      $('#ApprovedDrugsAndClinicalCandidates').hide();
      return;
    }
    this.clearTable();
    this.clearList();
    this.fill_template('ADCCTable-large');
    this.fill_template('ADCCUL-small');
    this.fillPaginator();
    this.showVisibleContent();
    this.initEmbedModal('approved_drugs_clinical_candidates');
    this.activateModals();
    return $('select').material_select();
  },
  fill_template: function(elem_id) {
    var adcc, elem, header_row_cont, header_template, new_row_cont, template, _i, _len, _ref, _results;
    elem = $(this.el).find('#' + elem_id);
    template = $('#' + elem.attr('data-hb-template'));
    if (elem_id === 'ADCCTable-large') {
      header_template = $('#Handlebars-Target-TableHeader');
      header_row_cont = Handlebars.compile(header_template.html())({
        columns: this.collection.getMeta('columns')
      });
      elem.append($(header_row_cont));
    }
    _ref = this.collection.getCurrentPage();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      adcc = _ref[_i];
      new_row_cont = Handlebars.compile(template.html())({
        molecule_chembl_id: adcc.get('molecule_chembl_id'),
        pref_name: adcc.get('pref_name'),
        mechanism_of_action: adcc.get('mechanism_of_action'),
        max_phase: adcc.get('max_phase')
      });
      _results.push(elem.append($(new_row_cont)));
    }
    return _results;
  },
  fillPaginator: function() {
    var current_page, elem, first_record, last_page, num, page_size, pages, records_in_page, template;
    elem = $(this.el).find('#ADCCUL-paginator');
    template = $('#' + elem.attr('data-hb-template'));
    current_page = this.collection.getMeta('current_page');
    records_in_page = this.collection.getMeta('records_in_page');
    page_size = this.collection.getMeta('page_size');
    first_record = (current_page - 1) * page_size;
    last_page = first_record + records_in_page;
    pages = (function() {
      var _i, _ref, _results;
      _results = [];
      for (num = _i = 1, _ref = this.collection.getMeta('total_pages'); 1 <= _ref ? _i <= _ref : _i >= _ref; num = 1 <= _ref ? ++_i : --_i) {
        _results.push(num);
      }
      return _results;
    }).call(this);
    elem.html(Handlebars.compile(template.html())({
      pages: pages,
      records_showing: first_record + '-' + last_page,
      total_records: this.collection.getMeta('total_records')
    }));
    this.activateCurrentPageButton();
    return this.enableDisableNextLastButtons();
  },
  clearTable: function() {
    return $('#ADCCTable-large').empty();
  },
  clearList: function() {
    return $('#ADCCUL-small').empty();
  }
});
