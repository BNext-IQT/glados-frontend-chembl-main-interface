// Generated by CoffeeScript 1.4.0
var PaginatedViewExt;

PaginatedViewExt = {
  getPage: function(event) {
    var clicked, current_page, requested_page_num;
    clicked = $(event.currentTarget);
    if (clicked.hasClass('disabled')) {
      return;
    }
    requested_page_num = clicked.attr('data-page');
    current_page = this.collection.getMeta('current_page');
    if (current_page === requested_page_num) {
      return;
    }
    if (requested_page_num === "previous") {
      requested_page_num = current_page - 1;
    } else if (requested_page_num === "next") {
      requested_page_num = current_page + 1;
    }
    return this.collection.setPage(requested_page_num);
  },
  enableDisableNextLastButtons: function() {
    var current_page, total_pages;
    current_page = parseInt(this.collection.getMeta('current_page'));
    total_pages = parseInt(this.collection.getMeta('total_pages'));
    if (current_page === 1) {
      $(this.el).find("[data-page='previous']").addClass('disabled');
    } else {
      $(this.el).find("[data-page='previous']").removeClass('disabled');
    }
    if (current_page === total_pages) {
      return $(this.el).find("[data-page='next']").addClass('disabled');
    } else {
      return $(this.el).find("[data-page='next']").removeClass('disabled');
    }
  },
  activateCurrentPageButton: function() {
    var current_page;
    current_page = this.collection.getMeta('current_page');
    $(this.el).find('.page-selector').removeClass('active');
    return $(this.el).find("[data-page=" + current_page + "]").addClass('active');
  },
  changePageSize: function(event) {
    var new_page_size, selector;
    selector = $(event.currentTarget);
    new_page_size = selector.val();
    return this.collection.resetPageSize(new_page_size);
  },
  setSearch: function() {
    return console.log('search!!');
  },
  sortCollection: function(event) {
    var comparator, order_icon;
    order_icon = $(event.currentTarget);
    comparator = order_icon.attr('data-comparator');
    return this.collection.sortCollection(comparator);
  }
};
