// Generated by CoffeeScript 1.4.0
var DocumentWordCloudView;

DocumentWordCloudView = CardView.extend(ResponsiviseViewExt).extend({
  initialize: function() {
    var updateViewProxy;
    updateViewProxy = this.setUpResponsiveRender();
    return this.model.on('change', this.render, this);
  },
  render: function() {
    var K, canvasElem, config, desiredMaxWidth, elemID, elemWidth, getColourFor, getFontSizeFor, highestValue, highestValueWords, highestWordLength, lowestValue, maxFontSize, minFontSize, value, word, wordList, wordSize, wordVal, _i, _j, _len, _len1;
    elemID = $(this.el).attr('id');
    elemWidth = $(this.el).width();
    $(this.el).height(elemWidth);
    K = 0.54;
    wordList = this.model.get('word_list');
    console.log('original list:');
    console.log(JSON.stringify(wordList));
    highestValueWords = [];
    highestValue = 0;
    highestWordLength = 0;
    lowestValue = Number.MAX_VALUE;
    for (_i = 0, _len = wordList.length; _i < _len; _i++) {
      wordVal = wordList[_i];
      word = wordVal[0];
      wordSize = word.length;
      value = wordVal[1];
      if (value > highestValue) {
        highestValue = value;
        highestValueWords = [];
        highestValueWords.push(word);
        highestWordLength = wordSize;
      } else if (value === highestValue) {
        highestValueWords.push(word);
        if (wordSize > highestWordLength) {
          highestWordLength = wordSize;
        }
      } else {
        lowestValue = value;
      }
    }
    desiredMaxWidth = 0.8 * elemWidth;
    maxFontSize = parseInt(desiredMaxWidth / (K * highestWordLength));
    minFontSize = 10;
    getFontSizeFor = d3.scale.linear().domain([lowestValue, highestValue]).range([minFontSize, maxFontSize]).clamp(true);
    getColourFor = d3.scale.linear().domain([minFontSize, maxFontSize]).interpolate(d3.interpolateHcl).range([d3.rgb(Settings.VISUALISATION_TEAL_MIN), d3.rgb(Settings.VISUALISATION_TEAL_MAX)]);
    for (_j = 0, _len1 = wordList.length; _j < _len1; _j++) {
      wordVal = wordList[_j];
      wordVal[1] = getFontSizeFor(wordVal[1]);
    }
    console.log(wordList);
    config = {
      list: wordList,
      fontFamily: "Roboto Mono",
      drawOutOfBound: true,
      color: function(word, fontSize) {
        return getColourFor(fontSize);
      },
      rotateRatio: 0.0,
      classes: 'wordcloud-word',
      backgroundColor: Settings.VISUALISATION_CARD_GREY
    };
    canvasElem = document.getElementById(elemID);
    WordCloud(canvasElem, config);
    return $(canvasElem).on('wordcloudstop', function() {
      return $(this).find('.wordcloud-word').addClass('tooltiped').attr('data-position', 'bottom').attr('data-tooltip', "Click to see other documents with this term").tooltip();
    });
  }
});
