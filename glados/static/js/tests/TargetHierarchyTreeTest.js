// Generated by CoffeeScript 1.4.0

describe("Target hierarchy tree", function() {
  var getCollapsedNodesListStr, getExpandedNodesListStr, getFoundNodesListStr, getHiddenNodesListStr, getIncompleteNodesListStr, getNodeFromID, getSelectedNodesListStr, getShownNodesListStr, getUnSelectedNodesListStr, targetTree;
  targetTree = TargetBrowserApp.initTargetHierarchyTree();
  targetTree.url = '/static/data/sample_target_tree.json';
  beforeAll(function(done) {
    return targetTree.fetch({
      success: done
    });
  });
  afterEach(function() {
    targetTree.clearSelections();
    targetTree.resetSearch();
    return targetTree.collapseAll();
  });
  it("selects all nodes", function(done) {
    var node, _i, _len, _ref;
    targetTree.selectAll();
    _ref = targetTree.get('all_nodes').models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      expect(node.get('selected')).toBe(true);
      expect(node.get('incomplete')).toBe(false);
    }
    return done();
  });
  it("clears all selections", function(done) {
    var node, _i, _len, _ref;
    targetTree.clearSelections();
    _ref = targetTree.get('all_nodes').models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      expect(node.get('selected')).toBe(false);
      expect(node.get('incomplete')).toBe(false);
    }
    return done();
  });
  it("collapses all nodes", function(done) {
    var node, _i, _len, _ref;
    targetTree.collapseAll();
    _ref = targetTree.get('all_nodes').models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      expect(node.get('collapsed')).toBe(true);
    }
    return done();
  });
  it("expands all nodes", function(done) {
    var node, _i, _len, _ref;
    targetTree.expandAll();
    _ref = targetTree.get('all_nodes').models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      expect(node.get('collapsed')).toBe(false);
    }
    return done();
  });
  it("selects a node and its children", function(done) {
    var all_nodes, enzyme_node, nodes_dict, selected_ids_str, unselected_ids_str;
    nodes_dict = targetTree.get('all_nodes_dict');
    enzyme_node = nodes_dict['1'];
    enzyme_node.checkMeAndMyDescendants();
    all_nodes = targetTree.get('all_nodes').models;
    selected_ids_str = getSelectedNodesListStr();
    unselected_ids_str = getUnSelectedNodesListStr();
    expect(selected_ids_str).toBe('1,2,3,4,5,6,7');
    expect(unselected_ids_str).toBe('10,11,12,8,9');
    return done();
  });
  it("unselects a node and its children", function(done) {
    var enzyme_node, selected_ids_str, unselected_ids_str;
    targetTree.selectAll();
    enzyme_node = getNodeFromID('1');
    enzyme_node.unCheckMeAndMyDescendants();
    selected_ids_str = getSelectedNodesListStr();
    unselected_ids_str = getUnSelectedNodesListStr();
    expect(selected_ids_str).toBe('10,11,12,8,9');
    expect(unselected_ids_str).toBe('1,2,3,4,5,6,7');
    return done();
  });
  it("marks parent nodes as incomplete", function(done) {
    var all_nodes, incomplete_nodes, metallo_node, selected_nodes, unselected_nodes;
    metallo_node = getNodeFromID('7');
    metallo_node.checkMeAndMyDescendants();
    all_nodes = targetTree.get('all_nodes').models;
    selected_nodes = getSelectedNodesListStr();
    incomplete_nodes = getIncompleteNodesListStr();
    unselected_nodes = getUnSelectedNodesListStr();
    expect(selected_nodes).toBe('7');
    expect(incomplete_nodes).toBe('1,5');
    expect(unselected_nodes).toBe('1,10,11,12,2,3,4,5,6,8,9');
    return done();
  });
  it("selects a node when all its children are selected", function(done) {
    var incomplete_nodes, metallo_node, selected_nodes, serine_node, unselected_nodes;
    metallo_node = getNodeFromID('7');
    serine_node = getNodeFromID('6');
    metallo_node.checkMeAndMyDescendants();
    serine_node.checkMeAndMyDescendants();
    selected_nodes = getSelectedNodesListStr();
    incomplete_nodes = getIncompleteNodesListStr();
    unselected_nodes = getUnSelectedNodesListStr();
    expect(selected_nodes).toBe('5,6,7');
    expect(incomplete_nodes).toBe('1');
    expect(unselected_nodes).toBe('1,10,11,12,2,3,4,8,9');
    return done();
  });
  it("selects and marks as incomplete nodes when an intermediate node is selected", function(done) {
    var incomplete_nodes, kinase_node, selected_nodes, unselected_nodes;
    kinase_node = getNodeFromID('2');
    kinase_node.checkMeAndMyDescendants();
    selected_nodes = getSelectedNodesListStr();
    incomplete_nodes = getIncompleteNodesListStr();
    unselected_nodes = getUnSelectedNodesListStr();
    expect(selected_nodes).toBe('2,3,4');
    expect(incomplete_nodes).toBe('1');
    expect(unselected_nodes).toBe('1,10,11,12,5,6,7,8,9');
    return done();
  });
  it("expands all nodes", function(done) {
    var expanded_nodes;
    targetTree.expandAll();
    expanded_nodes = getExpandedNodesListStr();
    expect(expanded_nodes).toBe('1,10,11,12,2,3,4,5,6,7,8,9');
    return done();
  });
  it("collapses all nodes", function(done) {
    var collapsed_nodes;
    targetTree.expandAll();
    targetTree.collapseAll();
    collapsed_nodes = getCollapsedNodesListStr();
    expect(collapsed_nodes).toBe('1,10,11,12,2,3,4,5,6,7,8,9');
    return done();
  });
  it("shows the correct nodes when one is expanded", function(done) {
    var enzyme_node, hidden_nodes, shown_nodes;
    enzyme_node = getNodeFromID('1');
    enzyme_node.expandMe();
    shown_nodes = getShownNodesListStr();
    hidden_nodes = getHiddenNodesListStr();
    expect(shown_nodes).toBe('1,10,2,5,8');
    expect(hidden_nodes).toBe('11,12,3,4,6,7,9');
    return done();
  });
  it("remembers which nodes were expanded", function(done) {
    var enzyme_node, hidden_nodes, kinase_node, shown_nodes;
    enzyme_node = getNodeFromID('1');
    kinase_node = getNodeFromID('2');
    enzyme_node.expandMe();
    kinase_node.expandMe();
    enzyme_node.collapseMe();
    enzyme_node.expandMe();
    shown_nodes = getShownNodesListStr();
    hidden_nodes = getHiddenNodesListStr();
    expect(shown_nodes).toBe('1,10,2,3,4,5,8');
    expect(hidden_nodes).toBe('11,12,6,7,9');
    return done();
  });
  it("searches for a node", function(done) {
    var found_nodes, shown_nodes;
    targetTree.searchInTree('Kinase');
    shown_nodes = getShownNodesListStr();
    found_nodes = getFoundNodesListStr();
    expect(shown_nodes).toBe('1,10,2,3,4,5,8');
    expect(found_nodes).toBe('2,3,4');
    return done();
  });
  it("resets a search", function(done) {
    var found_nodes, shown_nodes;
    targetTree.searchInTree('Kinase');
    targetTree.resetSearch();
    shown_nodes = getShownNodesListStr();
    found_nodes = getFoundNodesListStr();
    expect(shown_nodes).toBe('1,10,8');
    expect(found_nodes).toBe('');
    return done();
  });
  getSelectedNodesListStr = function() {
    var all_nodes;
    all_nodes = targetTree.get('all_nodes').models;
    return _.map(_.filter(all_nodes, function(model) {
      return model.get('selected') && !model.get('incomplete');
    }), function(selected) {
      return selected.get('id');
    }).sort().toString();
  };
  getUnSelectedNodesListStr = function() {
    var all_nodes;
    all_nodes = targetTree.get('all_nodes').models;
    return _.map(_.filter(all_nodes, function(model) {
      return !model.get('selected');
    }), function(selected) {
      return selected.get('id');
    }).sort().toString();
  };
  getNodeFromID = function(id) {
    return targetTree.get('all_nodes_dict')[id];
  };
  getIncompleteNodesListStr = function() {
    var all_nodes;
    all_nodes = targetTree.get('all_nodes').models;
    return _.map(_.filter(all_nodes, function(model) {
      return model.get('incomplete');
    }), function(selected) {
      return selected.get('id');
    }).sort().toString();
  };
  getCollapsedNodesListStr = function() {
    var all_nodes;
    all_nodes = targetTree.get('all_nodes').models;
    return _.map(_.filter(all_nodes, function(model) {
      return model.get('collapsed');
    }), function(selected) {
      return selected.get('id');
    }).sort().toString();
  };
  getExpandedNodesListStr = function() {
    var all_nodes;
    all_nodes = targetTree.get('all_nodes').models;
    return _.map(_.filter(all_nodes, function(model) {
      return !model.get('collapsed');
    }), function(selected) {
      return selected.get('id');
    }).sort().toString();
  };
  getShownNodesListStr = function() {
    var all_nodes;
    all_nodes = targetTree.get('all_nodes').models;
    return _.map(_.filter(all_nodes, function(model) {
      return model.get('show');
    }), function(selected) {
      return selected.get('id');
    }).sort().toString();
  };
  getHiddenNodesListStr = function() {
    var all_nodes;
    all_nodes = targetTree.get('all_nodes').models;
    return _.map(_.filter(all_nodes, function(model) {
      return !model.get('show');
    }), function(selected) {
      return selected.get('id');
    }).sort().toString();
  };
  return getFoundNodesListStr = function() {
    var all_nodes;
    all_nodes = targetTree.get('all_nodes').models;
    return _.map(_.filter(all_nodes, function(model) {
      return model.get('found');
    }), function(selected) {
      return selected.get('id');
    }).sort().toString();
  };
});
