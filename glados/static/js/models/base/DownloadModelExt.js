// Generated by CoffeeScript 1.4.0
var DownloadModelExt;

DownloadModelExt = {
  getBlobToDownload: function(contentStr, contentType) {
    if (contentType == null) {
      contentType = 'text/plain;charset=utf-8';
    }
    return new Blob([contentStr], {
      type: contentType
    });
  },
  getDownloadObject: function(downloadParserFunction) {
    if (!(downloadParserFunction != null)) {
      return this.attributes;
    } else {
      return downloadParserFunction(this.attributes);
    }
  },
  getCSVHeaderString: function(downloadObject) {
    var key, keys, value;
    keys = [];
    for (key in downloadObject) {
      value = downloadObject[key];
      keys.push(key);
    }
    return keys.join(';');
  },
  getCSVContentString: function(downloadObject) {
    var key, value, values;
    values = [];
    for (key in downloadObject) {
      value = downloadObject[key];
      values.push(JSON.stringify(downloadObject[key]));
    }
    return values.join(';');
  },
  getFullCSVString: function(downloadObject) {
    var content, header;
    header = this.getCSVHeaderString(downloadObject);
    content = this.getCSVContentString(downloadObject);
    return header + '\n' + content;
  },
  downloadCSV: function(filename, downloadParserFunction) {
    var blob, downloadObject;
    downloadObject = this.getDownloadObject(downloadParserFunction);
    blob = this.getBlobToDownload(this.getFullCSVString(downloadObject));
    return saveAs(blob, filename);
  },
  getJSONString: function(downloadObject) {
    return JSON.stringify(downloadObject);
  },
  downloadJSON: function(filename, downloadParserFunction) {
    var blob, downloadObject, strContent;
    downloadObject = this.getDownloadObject(downloadParserFunction);
    strContent = this.getJSONString(downloadObject);
    blob = this.getBlobToDownload(strContent);
    saveAs(blob, filename);
    return strContent;
  },
  getXLSString: function(downloadObject) {
    var Workbook, cellContent, cellNumber, cellVal, currentColumn, currentRow, key, range, s2ab, value, wb, wbout, ws;
    Workbook = function() {
      if (!(this instanceof Workbook)) {
        return new Workbook;
      }
      this.SheetNames = [];
      this.Sheets = {};
    };
    wb = new Workbook();
    wb.SheetNames.push('sheet1');
    ws = {};
    currentRow = 0;
    currentColumn = 0;
    for (key in downloadObject) {
      value = downloadObject[key];
      cellNumber = XLSX.utils.encode_cell({
        c: currentColumn,
        r: currentRow
      });
      cellContent = {
        v: key,
        t: 's'
      };
      ws[cellNumber] = cellContent;
      currentColumn++;
    }
    currentRow++;
    currentColumn = 0;
    for (key in downloadObject) {
      value = downloadObject[key];
      cellNumber = XLSX.utils.encode_cell({
        c: currentColumn,
        r: currentRow
      });
      if (value != null) {
        cellVal = value;
      } else {
        cellVal = '---';
      }
      cellContent = {
        v: String(cellVal),
        t: 's'
      };
      ws[cellNumber] = cellContent;
      currentColumn++;
    }
    range = {
      s: {
        c: 0,
        r: 0
      },
      e: {
        c: currentColumn - 1,
        r: currentRow
      }
    };
    ws['!ref'] = XLSX.utils.encode_range(range);
    wb.Sheets['sheet1'] = ws;
    wbout = XLSX.write(wb, {
      bookType: 'xlsx',
      bookSST: true,
      type: 'binary'
    });
    s2ab = function(s) {
      var buf, i, view;
      buf = new ArrayBuffer(s.length);
      view = new Uint8Array(buf);
      i = 0;
      while (i !== s.length) {
        view[i] = s.charCodeAt(i) & 0xFF;
        ++i;
      }
      return buf;
    };
    return s2ab(wbout);
  },
  downloadXLS: function(filename, downloadParserFunction) {
    var blob, downloadObject;
    downloadObject = this.getDownloadObject(downloadParserFunction);
    blob = this.getBlobToDownload(this.getXLSString(downloadObject), 'application/octet-stream');
    return saveAs(blob, filename);
  }
};
