// Generated by CoffeeScript 1.4.0
var CompoundTargetMatrix;

CompoundTargetMatrix = Backbone.Model.extend({
  initialize: function() {
    var config;
    this.url = 'https://www.ebi.ac.uk/chembl/api/data/activity.json?limit=1000&molecule_chembl_id__in=CHEMBL554,CHEMBL212250,CHEMBL212201,CHEMBL212251,CHEMBL384407,CHEMBL387207,CHEMBL215814,CHEMBL383965,CHEMBL214487,CHEMBL212954,CHEMBL213342,CHEMBL215716,CHEMBL213818,CHEMBL212965,CHEMBL214023,CHEMBL265367,CHEMBL215171,CHEMBL214419,CHEMBL384711,CHEMBL380247,CHEMBL215993,CHEMBL377437,CHEMBL214689,CHEMBL213822,CHEMBL215033,CHEMBL445572,CHEMBL377250,CHEMBL490062,CHEMBL588324,CHEMBL528983,CHEMBL529972,CHEMBL528234,CHEMBL532686,CHEMBL546497,CHEMBL548563,CHEMBL1630107,CHEMBL1630111,CHEMBL1630113,CHEMBL1630117,CHEMBL1794063,CHEMBL2347565,CHEMBL2347566,CHEMBL2347567,CHEMBL2407820,CHEMBL3040455,CHEMBL3040543,CHEMBL3040548,CHEMBL3040566,CHEMBL3040597,CHEMBL3344208,CHEMBL3344209,CHEMBL3344210,CHEMBL3344211,CHEMBL3344212,CHEMBL3344213,CHEMBL3344214,CHEMBL3344215,CHEMBL3344216,CHEMBL3344217,CHEMBL3344218,CHEMBL3344219,CHEMBL3344220,CHEMBL3344221,CHEMBL3526263,CHEMBL3526326,CHEMBL3526479,CHEMBL3526480,CHEMBL3526609,CHEMBL3526763,CHEMBL3526764,CHEMBL3526765,CHEMBL3527094,CHEMBL3527095,CHEMBL3542267,CHEMBL3542268,CHEMBL3546948,CHEMBL3546949,CHEMBL3546966,CHEMBL3546967,CHEMBL3546968,CHEMBL3546969,CHEMBL3546976,CHEMBL3666714,CHEMBL3706535';
    this.url = 'https://www.ebi.ac.uk/chembl/api/data/activity.json?limit=1000&molecule_chembl_id__in=CHEMBL554,CHEMBL212250,CHEMBL212201,CHEMBL212251,CHEMBL384407,CHEMBL387207,CHEMBL215814,CHEMBL383965,CHEMBL214487,CHEMBL212954,CHEMBL213342,CHEMBL215716,CHEMBL213818,CHEMBL212965,CHEMBL214023,CHEMBL265367,CHEMBL215171,CHEMBL214419,CHEMBL384711,CHEMBL380247,CHEMBL215993,CHEMBL377437,CHEMBL214689,CHEMBL213822,CHEMBL215033,CHEMBL445572,CHEMBL377250,CHEMBL490062,CHEMBL588324,CHEMBL528983,CHEMBL529972,CHEMBL528234,CHEMBL532686,CHEMBL546497,CHEMBL548563,CHEMBL1630111,CHEMBL1630113,CHEMBL1630117,CHEMBL1794063,CHEMBL2347565,CHEMBL2347566,CHEMBL2347567,CHEMBL2407820,CHEMBL3040455,CHEMBL3040543,CHEMBL3040548,CHEMBL3040566,CHEMBL3040597,CHEMBL3344208,CHEMBL3344209,CHEMBL3344210,CHEMBL3344211,CHEMBL3344212,CHEMBL3344213,CHEMBL3344214,CHEMBL3344215,CHEMBL3344216,CHEMBL3344217,CHEMBL3344218,CHEMBL3344219,CHEMBL3344220,CHEMBL3344221,CHEMBL3526263,CHEMBL3526326,CHEMBL3526479,CHEMBL3526480,CHEMBL3526609,CHEMBL3526763,CHEMBL3526764,CHEMBL3526765,CHEMBL3527094,CHEMBL3527095,CHEMBL3542267,CHEMBL3542268,CHEMBL3546948,CHEMBL3546949,CHEMBL3546966,CHEMBL3546967,CHEMBL3546968,CHEMBL3546969,CHEMBL3546976,CHEMBL3666714,CHEMBL3706535';
    console.log(this.url);
    config = {
      initial_colouring: 'assay_type',
      colour_properties: ['pchembl_value', 'assay_type', 'published_value'],
      initial_row_sorting: 'pchembl_value',
      row_sorting_properties: ['pchembl_value', 'published_value'],
      initial_col_sorting: 'published_value',
      col_sorting_properties: ['pchembl_value', 'published_value'],
      propertyToType: {
        assay_type: "string",
        pchembl_value: "number",
        published_value: "number"
      }
    };
    return this.set('config', config);
  },
  parse: function(response) {
    var act, activities, cell, compObj, compPos, compoundsList, compoundsToPosition, config, currentCompound, currentTarget, i, j, latestCompPos, latestTargPos, links, newCompoundObj, newTargetObj, property, result, row, targObj, targPos, targetsList, targetsToPosition, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    console.log('data received!');
    config = this.get('config');
    activities = response.activities;
    compoundsToPosition = {};
    targetsToPosition = {};
    links = {};
    compoundsList = [];
    latestCompPos = 0;
    targetsList = [];
    latestTargPos = 0;
    for (_i = 0, _len = activities.length; _i < _len; _i++) {
      act = activities[_i];
      currentCompound = act.molecule_chembl_id;
      currentTarget = act.target_chembl_id;
      compPos = compoundsToPosition[currentCompound];
      targPos = targetsToPosition[currentTarget];
      if (!(compPos != null)) {
        newCompoundObj = {
          name: currentCompound,
          originalIndex: latestCompPos,
          currentPosition: latestCompPos
        };
        _ref = config.col_sorting_properties;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          property = _ref[_j];
          if (act[property] != null) {
            newCompoundObj[property + '_sum'] = parseFloat(act[property]);
          } else {
            newCompoundObj[property + '_sum'] = 0;
          }
        }
        compoundsList.push(newCompoundObj);
        compoundsToPosition[currentCompound] = latestCompPos;
        latestCompPos++;
      } else {
        compObj = compoundsList[compPos];
        _ref1 = config.col_sorting_properties;
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          property = _ref1[_k];
          if (act[property] != null) {
            compObj[property + '_sum'] += parseFloat(act[property]);
          }
        }
      }
      if (!(targPos != null)) {
        newTargetObj = {
          name: currentTarget,
          originalIndex: latestTargPos,
          currentPosition: latestTargPos
        };
        targetsList.push(newTargetObj);
        targetsToPosition[currentTarget] = latestTargPos;
        latestTargPos++;
        _ref2 = config.row_sorting_properties;
        for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
          property = _ref2[_l];
          if (act[property] != null) {
            newTargetObj[property + '_sum'] = parseFloat(act[property]);
          } else {
            newTargetObj[property + '_sum'] = 0;
          }
        }
      } else {
        targObj = targetsList[targPos];
        _ref3 = config.row_sorting_properties;
        for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
          property = _ref3[_m];
          if (act[property] != null) {
            targObj[property + '_sum'] += parseFloat(act[property]);
          }
        }
      }
      compPos = compoundsToPosition[currentCompound];
      targPos = targetsToPosition[currentTarget];
      if (!(links[targPos] != null)) {
        links[targPos] = {};
      }
      links[targPos][compPos] = act;
    }
    for (i = _n = 0, _ref4 = targetsList.length - 1; 0 <= _ref4 ? _n <= _ref4 : _n >= _ref4; i = 0 <= _ref4 ? ++_n : --_n) {
      row = links[i];
      if (!(row != null)) {
        links[i] = {};
      }
      for (j = _o = 0, _ref5 = compoundsList.length - 1; 0 <= _ref5 ? _o <= _ref5 : _o >= _ref5; j = 0 <= _ref5 ? ++_o : --_o) {
        cell = links[i][j];
        if (!(cell != null)) {
          links[i][j] = {
            molecule_chembl_id: links[targPos][compPos]['molecule_chembl_id'],
            target_chembl_id: links[targPos][compPos]['target_chembl_id']
          };
        }
      }
    }
    result = {
      "columns": compoundsList,
      "rows": targetsList,
      "links": links
    };
    console.log('data processed!');
    console.log('result: ', result);
    return {
      "matrix": result
    };
  }
});
