// Generated by CoffeeScript 1.4.0
var CompoundTargetMatrix;

CompoundTargetMatrix = Backbone.Model.extend({
  initialize: function() {
    return this.url = 'https://www.ebi.ac.uk/chembl/api/data/activity.json?limit=40&pchembl_value__isnull=false';
  },
  parse: function(response) {
    var act, activities, cell, compPos, compoundsList, compoundsToPosition, currentCompound, currentTarget, i, j, latestCompPos, latestTargPos, links, result, row, targPos, targetsList, targetsToPosition, _i, _j, _k, _len, _ref, _ref1;
    activities = response.activities;
    compoundsToPosition = {};
    targetsToPosition = {};
    links = {};
    compoundsList = [];
    latestCompPos = 0;
    targetsList = [];
    latestTargPos = 0;
    for (_i = 0, _len = activities.length; _i < _len; _i++) {
      act = activities[_i];
      currentCompound = act.molecule_chembl_id;
      currentTarget = act.target_chembl_id;
      if (!(compoundsToPosition[currentCompound] != null)) {
        compoundsList.push({
          "name": currentCompound
        });
        compoundsToPosition[currentCompound] = latestCompPos;
        latestCompPos++;
      }
      if (!(targetsToPosition[currentTarget] != null)) {
        targetsList.push({
          "name": currentTarget
        });
        targetsToPosition[currentTarget] = latestTargPos;
        latestTargPos++;
      }
      compPos = compoundsToPosition[currentCompound];
      targPos = targetsToPosition[currentTarget];
      if (!(links[targPos] != null)) {
        links[targPos] = {};
      }
      links[targPos][compPos] = act;
    }
    for (i = _j = 0, _ref = targetsList.length - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
      row = links[i];
      if (!(row != null)) {
        links[i] = {};
      }
      for (j = _k = 0, _ref1 = compoundsList.length - 1; 0 <= _ref1 ? _k <= _ref1 : _k >= _ref1; j = 0 <= _ref1 ? ++_k : --_k) {
        cell = links[i][j];
        if (!(cell != null)) {
          links[i][j] = {};
        }
      }
    }
    result = {
      "columns": compoundsList,
      "rows": targetsList,
      "links": links
    };
    console.log('result: ', result);
    return {
      "matrix": result
    };
  }
});
