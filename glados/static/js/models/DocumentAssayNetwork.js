// Generated by CoffeeScript 1.4.0
var DocumentAssayNetwork;

DocumentAssayNetwork = Backbone.Model.extend(DownloadModelOrCollectionExt).extend({
  fetch: function() {
    var activitiesListsReceived, activitiesListsRequested, allAssays, assaysUrl, checkIfAllInfoReady, docChemblId, links, nodes, thisModel, triggerActivityRequest, triggerAssayRequest;
    docChemblId = this.get('document_chembl_id');
    assaysUrl = Settings.WS_BASE_URL + 'assay.json?document_chembl_id=' + docChemblId + '&limit=1000';
    allAssays = {};
    activitiesListsRequested = 0;
    activitiesListsReceived = 0;
    triggerAssayRequest = function(currentUrl) {
      var getAssaysGroup;
      getAssaysGroup = $.getJSON(currentUrl, function(response) {
        var newAssays, nextUrl;
        newAssays = response.assays;
        $.each(newAssays, function(index, newAssay) {
          var currentActsUrl;
          allAssays[newAssay.assay_chembl_id] = newAssay;
          currentActsUrl = Settings.WS_BASE_URL + 'activity.json?assay_chembl_id=' + newAssay.assay_chembl_id + '&limit=1000';
          activitiesListsRequested++;
          return triggerActivityRequest(currentActsUrl);
        });
        nextUrl = response.page_meta.next;
        if (nextUrl != null) {
          return triggerAssayRequest(Settings.WS_HOSTNAME + nextUrl);
        }
      });
      return getAssaysGroup.fail(function() {
        return console.log('FAILED getting assays list!');
      });
    };
    triggerAssayRequest(assaysUrl);
    triggerActivityRequest = function(currentActsUrl) {
      var getActivityGroup;
      getActivityGroup = $.getJSON(currentActsUrl, function(response) {
        var newActivities, nextUrl;
        newActivities = response.activities;
        $.each(newActivities, function(index, newActivity) {
          var currentAssay;
          currentAssay = allAssays[newActivity.assay_chembl_id];
          if (currentAssay.compound_act_list == null) {
            currentAssay.compound_act_list = {};
          }
          return currentAssay.compound_act_list[newActivity.molecule_chembl_id] = 1;
        });
        nextUrl = response.page_meta.next;
        if (nextUrl != null) {
          return triggerActivityRequest(Settings.WS_HOSTNAME + nextUrl);
        } else {
          activitiesListsReceived++;
          return checkIfAllInfoReady();
        }
      });
      return getActivityGroup.fail(function() {
        return console.log('FAILED activities list!');
      });
    };
    nodes = [];
    links = [];
    thisModel = this;
    return checkIfAllInfoReady = function() {
      var answer;
      if (activitiesListsRequested === activitiesListsReceived) {
        $.each(allAssays, function(index, assay) {
          assay.name = assay.assay_chembl_id;
          return nodes.push(assay);
        });
        $.each(nodes, function(i, assayI) {
          var compoundsI;
          compoundsI = assayI.compound_act_list;
          return $.each(nodes, function(j, assayJ) {
            var compoundsJ, molecule_chembl_id, numEqual, val;
            if (i > j) {
              return;
            }
            compoundsJ = assayJ.compound_act_list;
            numEqual = 0;
            for (molecule_chembl_id in compoundsI) {
              val = compoundsI[molecule_chembl_id];
              if (compoundsJ[molecule_chembl_id] === 1) {
                numEqual++;
              }
            }
            return links.push({
              "source": i,
              "target": j,
              "value": numEqual,
              "source_name": assayI.assay_chembl_id,
              "target_name": assayJ.assay_chembl_id
            });
          });
        });
        answer = {
          'nodes': nodes,
          'links': links
        };
        return thisModel.set('graph', answer);
      }
    };
  }
});
