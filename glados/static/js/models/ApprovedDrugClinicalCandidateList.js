// Generated by CoffeeScript 1.4.0
var ApprovedDrugClinicalCandidateList;

ApprovedDrugClinicalCandidateList = Backbone.Collection.extend({
  model: ApprovedDrugClinicalCandidate,
  fetch: function() {
    var base_url2, drug_mechanisms, getDrugMechanisms, pag_url, this_collection;
    pag_url = this.getPaginatedURL(this.url);
    console.log('fetching:');
    console.log(pag_url);
    this_collection = this;
    drug_mechanisms = {};
    getDrugMechanisms = $.getJSON(pag_url, function(data) {
      return drug_mechanisms = data.mechanisms;
    });
    getDrugMechanisms.fail(function() {
      console.log('error');
      return this_collection.trigger('error');
    });
    base_url2 = 'https://www.ebi.ac.uk/chembl/api/data/molecule.json?molecule_chembl_id__in=';
    return getDrugMechanisms.done(function() {
      var dm, getMoleculesInfo, getMoleculesInfoUrl, molecules_list;
      molecules_list = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = drug_mechanisms.length; _i < _len; _i++) {
          dm = drug_mechanisms[_i];
          _results.push(dm.molecule_chembl_id);
        }
        return _results;
      })()).join(',');
      getMoleculesInfoUrl = base_url2 + molecules_list + '&order_by=molecule_chembl_id&limit=1000';
      console.log(getMoleculesInfoUrl);
      getMoleculesInfo = $.getJSON(getMoleculesInfoUrl, function(data) {
        var i, mol, molecules, _i, _len;
        molecules = data.molecules;
        i = 0;
        for (_i = 0, _len = molecules.length; _i < _len; _i++) {
          mol = molecules[_i];
          drug_mechanisms[i].max_phase = mol.max_phase;
          drug_mechanisms[i].pref_name = mol.pref_name;
          i++;
        }
        return this_collection.reset(drug_mechanisms);
      });
      return getMoleculesInfo.fail(function() {
        return console.log('failed2');
      });
    });
  },
  initialize: function() {
    return this.meta = {
      page_size: 10,
      current_page: 1
    };
  },
  setMeta: function(attr, value) {
    this.meta[attr] = value;
    return this.trigger('meta-changed');
  },
  getMeta: function(attr) {
    return this.meta[attr];
  },
  getPaginatedURL: function(url) {
    var current_page, limit_str, page_size, page_str;
    page_size = this.getMeta('page_size');
    current_page = this.getMeta('current_page');
    limit_str = 'limit=' + page_size;
    page_str = 'offset=' + (current_page - 1) * page_size;
    return url + '&' + limit_str + '&' + page_str;
  },
  fetchPage: function(page_num, force) {
    this.setMeta('current_page', page_num);
    return this.fetch();
  }
});
