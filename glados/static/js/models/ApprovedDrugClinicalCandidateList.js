// Generated by CoffeeScript 1.4.0
var ApprovedDrugClinicalCandidateList;

ApprovedDrugClinicalCandidateList = Backbone.Collection.extend({
  model: ApprovedDrugClinicalCandidate,
  fetch: function() {
    var base_url2, drug_mechanisms, getDrugMechanisms, this_collection;
    console.log('fetching:');
    console.log(this.url);
    this_collection = this;
    drug_mechanisms = {};
    getDrugMechanisms = $.getJSON(this.url, function(data) {
      return drug_mechanisms = data.mechanisms;
    });
    getDrugMechanisms.fail(function() {
      console.log('error');
      return this_collection.trigger('error');
    });
    base_url2 = 'https://www.ebi.ac.uk/chembl/api/data/molecule.json?molecule_chembl_id__in=';
    return getDrugMechanisms.done(function() {
      var dm, getMoleculesInfo, getMoleculesInfoUrl, molecules_list;
      molecules_list = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = drug_mechanisms.length; _i < _len; _i++) {
          dm = drug_mechanisms[_i];
          _results.push(dm.molecule_chembl_id);
        }
        return _results;
      })()).join(',');
      getMoleculesInfoUrl = base_url2 + molecules_list + '&order_by=molecule_chembl_id&limit=1000';
      getMoleculesInfo = $.getJSON(getMoleculesInfoUrl, function(data) {
        var i, mol, molecules, _i, _len;
        molecules = data.molecules;
        i = 0;
        for (_i = 0, _len = molecules.length; _i < _len; _i++) {
          mol = molecules[_i];
          drug_mechanisms[i].max_phase = mol.max_phase;
          drug_mechanisms[i].pref_name = mol.pref_name;
          i++;
        }
        return this_collection.reset(drug_mechanisms);
      });
      return getMoleculesInfo.fail(function() {
        return console.log('failed2');
      });
    });
  },
  initialize: function() {
    this.meta = {
      page_size: 10,
      current_page: 1,
      to_show: [],
      columns: [
        {
          'name_to_show': 'ChEMBL ID',
          'comparator': 'molecule_chembl_id',
          'sort_disabled': false,
          'is_sorting': 0,
          'sort_class': 'fa-sort'
        }, {
          'name_to_show': 'Name',
          'comparator': 'pref_name',
          'sort_disabled': false,
          'is_sorting': 0,
          'sort_class': 'fa-sort'
        }, {
          'name_to_show': 'Mechanism of Action',
          'comparator': 'mechanism_of_action',
          'sort_disabled': false,
          'is_sorting': 0,
          'sort_class': 'fa-sort'
        }, {
          'name_to_show': 'Max Phase',
          'comparator': 'max_phase',
          'sort_disabled': false,
          'is_sorting': 0,
          'sort_class': 'fa-sort'
        }, {
          'name_to_show': 'References',
          'comparator': 'references',
          'sort_disabled': true,
          'is_sorting': 0
        }
      ]
    };
    return this.on('reset', this.resetMeta, this);
  },
  setMeta: function(attr, value) {
    this.meta[attr] = parseInt(value);
    return this.trigger('meta-changed');
  },
  getMeta: function(attr) {
    return this.meta[attr];
  },
  resetPageSize: function(new_page_size) {
    if (new_page_size === '') {
      return;
    }
    this.setMeta('page_size', new_page_size);
    this.setMeta('current_page', 1);
    this.calculateTotalPages();
    this.calculateHowManyInCurrentPage();
    return this.trigger('do-repaint');
  },
  resetMeta: function() {
    this.setMeta('total_records', this.models.length);
    this.setMeta('current_page', 1);
    this.calculateTotalPages();
    return this.calculateHowManyInCurrentPage();
  },
  calculateTotalPages: function() {
    var total_pages;
    total_pages = Math.ceil(this.models.length / this.getMeta('page_size'));
    return this.setMeta('total_pages', total_pages);
  },
  calculateHowManyInCurrentPage: function() {
    var current_page, page_size, total_pages, total_records;
    current_page = this.getMeta('current_page');
    total_pages = this.getMeta('total_pages');
    total_records = this.getMeta('total_records');
    page_size = this.getMeta('page_size');
    if (current_page === total_pages) {
      return this.setMeta('records_in_page', total_records % page_size);
    } else {
      return this.setMeta('records_in_page', this.getMeta('page_size'));
    }
  },
  getCurrentPage: function() {
    var current_page, end, page_size, records_in_page, start, to_show;
    page_size = this.getMeta('page_size');
    current_page = this.getMeta('current_page');
    records_in_page = this.getMeta('records_in_page');
    start = (current_page - 1) * page_size;
    end = start + records_in_page;
    to_show = this.models.slice(start, +end + 1 || 9e9);
    this.setMeta('to_show', to_show);
    return to_show;
  },
  setPage: function(page_num) {
    this.setMeta('current_page', page_num);
    return this.trigger('do-repaint');
  },
  sortCollection: function(comparator) {
    console.log('sort');
    this.comparator = comparator;
    return this.sort();
  },
  getPaginatedURL: function(url) {
    var current_page, limit_str, page_size, page_str;
    page_size = this.getMeta('page_size');
    current_page = this.getMeta('current_page');
    limit_str = 'limit=' + page_size;
    page_str = 'offset=' + (current_page - 1) * page_size;
    return url + '&' + limit_str + '&' + page_str;
  },
  fetchPage: function(page_num, force) {
    this.setMeta('current_page', page_num);
    return this.fetch();
  }
});
