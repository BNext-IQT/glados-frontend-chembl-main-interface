// Generated by CoffeeScript 1.4.0
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

glados.useNameSpace('glados.models.elastic_search', {
  ESPaginatedQueryCollection: Backbone.Collection.extend({
    parse: function(data) {
      var hitI, jsonResultsList, _i, _len, _ref;
      this.resetMeta(data.hits.total);
      jsonResultsList = [];
      _ref = data.hits.hits;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        hitI = _ref[_i];
        jsonResultsList.push(hitI._source);
      }
      return jsonResultsList;
    },
    fetch: function(options) {
      var esJSONRequest, esRequestData, fetchESOptions;
      this.url = glados.models.elastic_search.Settings.ES_BASE_URL + this.getMeta('index') + '/_search';
      esRequestData = {
        size: this.getMeta('page_size'),
        from: (this.getMeta('current_page') - 1) * this.getMeta('page_size'),
        min_score: 0.75,
        query: {
          bool: {
            must: [
              {
                query_string: {
                  default_field: "_all",
                  query: this.getMeta('search_term')
                }
              }
            ]
          }
        }
      };
      esJSONRequest = JSON.stringify(esRequestData);
      fetchESOptions = {
        data: esJSONRequest,
        type: 'POST',
        reset: true
      };
      if (!_.isUndefined(options) && _.isObject(options)) {
        _.extend(fetchESOptions, options);
      }
      return Backbone.Collection.prototype.fetch.call(this, fetchESOptions);
    },
    setMeta: function(attr, value) {
      this.meta[attr] = value;
      return this.trigger('meta-changed');
    },
    getMeta: function(attr) {
      return this.meta[attr];
    },
    hasMeta: function(attr) {
      return __indexOf.call(_.keys(this.meta), attr) >= 0;
    },
    resetPageSize: function(newPageSize) {
      return this.setMeta('page_size', parseInt(newPageSize));
    },
    resetMeta: function(totalRecords) {
      this.setMeta('total_records', parseInt(totalRecords));
      if (!this.hasMeta('current_page')) {
        this.setMeta('current_page', 1);
      }
      if (!this.hasMeta('search_term')) {
        this.setMeta('search_term', '');
      }
      this.setMeta('total_pages', Math.ceil(parseFloat(this.getMeta('total_records')) / parseFloat(this.getMeta('page_size'))));
      return this.calculateHowManyInCurrentPage();
    },
    calculateHowManyInCurrentPage: function() {
      return this.setMeta('records_in_page', this.getMeta('current_page') === this.getMeta('total_pages') ? this.getMeta('total_records') % this.getMeta('page_size') : this.getMeta('page_size'));
    },
    getCurrentPage: function() {
      return this.models;
    },
    setPage: function(newPageNum) {
      newPageNum = parseInt(newPageNum);
      if (1 <= newPageNum && newPageNum <= this.getMeta('total_pages')) {
        this.setMeta('current_page', newPageNum);
        return this.fetch();
      }
    },
    sortCollection: function(comparator) {},
    resetSortData: function() {},
    setupColSorting: function(columns, comparator) {},
    setSearch: function(term, column, type) {},
    getCurrentSortingComparator: function() {}
  })
});
