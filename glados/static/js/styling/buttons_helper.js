// Generated by CoffeeScript 1.4.0
var contract, expand, initCroppedContainers, initExpendableMenus, setLessText, setMoreText, toggleCroppedContainerWrapper, toggleExpandableMenuWrapper;

expand = function(elem) {
  elem.removeClass("cropped");
  return elem.addClass("expanded");
};

contract = function(elem) {
  elem.removeClass("expanded");
  return elem.addClass("cropped");
};

setMoreText = function(elem) {
  var icon;
  icon = $(elem).children('i');
  icon.removeClass('fa-caret-up');
  return icon.addClass('fa-caret-down');
};

setLessText = function(elem) {
  var icon;
  icon = $(elem).children('i');
  icon.removeClass('fa-caret-down');
  return icon.addClass('fa-caret-up');
};

/* *
  * @param {JQuery} elem element that is going to be toggled
  * @param {JQuery} buttons element that contains the buttons that activate this..
  * @return {Function} function that toggles the cropped container
*/


toggleCroppedContainerWrapper = function(elem, buttons) {
  var toggleCroppedContainer;
  toggleCroppedContainer = function() {
    if (elem.hasClass("expanded")) {
      contract(elem);
      setMoreText($(this));
      return buttons.removeClass('cropped-container-btns-exp');
    } else {
      expand(elem);
      setLessText($(this));
      return buttons.addClass('cropped-container-btns-exp');
    }
  };
  return toggleCroppedContainer;
};

/* *
  * Initializes the cropped container on the elements of the class 'cropped-container'
*/


initCroppedContainers = function() {
  return $('.cropped-container').each(function() {
    var activated, activator, buttons, heightLimit, overflow, toggler;
    activator = $(this).find('a[data-activates]');
    activated = $('#' + activator.attr('data-activates'));
    buttons = $(this).find('.cropped-container-btns');
    overflow = false;
    heightLimit = activated.offset().top + activated.height();
    activated.children().each(function() {
      var childHeightLimit;
      childHeightLimit = $(this).offset().top + $(this).height();
      if (childHeightLimit > heightLimit) {
        overflow = true;
        return false;
      }
    });
    console.log(overflow);
    if (overflow) {
      toggler = toggleCroppedContainerWrapper(activated, buttons);
      return activator.click(toggler);
    } else {
      return activator.hide();
    }
  });
};

toggleExpandableMenuWrapper = function(elem) {
  var toggleExpandableMenu;
  toggleExpandableMenu = function() {
    if (elem.css('display') === 'none') {
      return elem.slideDown(300);
    } else {
      return elem.slideUp(300);
    }
  };
  return toggleExpandableMenu;
};

/* *
  *  Initializes the cropped container on the elements of the class 'expandable-menu'
*/


initExpendableMenus = function() {
  return $('.expandable-menu').each(function() {
    var activated, activator, toggler;
    activator = $(this).find('a[data-activates]');
    activated = $('#' + activator.attr('data-activates'));
    toggler = toggleExpandableMenuWrapper(activated);
    return activator.click(toggler);
  });
};
