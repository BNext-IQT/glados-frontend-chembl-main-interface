// Generated by CoffeeScript 1.4.0
var animateCardMarginTopBottom, contract, expand, initCroppedContainers, initExpendableMenus, setLessText, setMoreText, toggleCardMarginWrapper, toggleCroppedContainerWrapper, toggleExpandableMenuWrapper;

expand = function(elem) {
  elem.removeClass("cropped");
  return elem.addClass("expanded");
};

contract = function(elem) {
  elem.removeClass("expanded");
  return elem.addClass("cropped");
};

setMoreText = function(elem) {
  var icon;
  icon = $(elem).children('i');
  icon.removeClass('fa-caret-up');
  return icon.addClass('fa-caret-down');
};

setLessText = function(elem) {
  var icon;
  icon = $(elem).children('i');
  icon.removeClass('fa-caret-down');
  return icon.addClass('fa-caret-up');
};

/* *
  * @param {JQuery} elem element that is going to be toggled
  * @param {JQuery} buttons element that contains the buttons that activate this..
  * @return {Function} function that toggles the cropped container
*/


toggleCroppedContainerWrapper = function(elem, buttons) {
  var toggleCroppedContainer;
  toggleCroppedContainer = function() {
    if (elem.hasClass("expanded")) {
      contract(elem);
      setMoreText($(this));
      return buttons.removeClass('cropped-container-btns-exp');
    } else {
      expand(elem);
      setLessText($(this));
      return buttons.addClass('cropped-container-btns-exp');
    }
  };
  return toggleCroppedContainer;
};

/* *
  * Initializes the cropped container on the elements of the class 'cropped-container'
*/


initCroppedContainers = function() {
  return $('.cropped-container').each(function() {
    var activated, activator, buttons, heightLimit, overflow, toggler;
    activator = $(this).find('a[data-activates]');
    activated = $('#' + activator.attr('data-activates'));
    buttons = $(this).find('.cropped-container-btns');
    overflow = false;
    heightLimit = activated.offset().top + activated.height();
    activated.children().each(function() {
      var childHeightLimit;
      childHeightLimit = $(this).offset().top + $(this).height();
      if (childHeightLimit > heightLimit) {
        overflow = true;
        return false;
      }
    });
    if (overflow) {
      toggler = toggleCroppedContainerWrapper(activated, buttons);
      return activator.click(toggler);
    } else {
      return activator.hide();
    }
  });
};

/* *
  * animates the top and bottom margin of the card given as a parameter to the ammounts given as a parameter
  * @param {JQuery} card element card for which the margin will changed
  * @param {Number} ammount_top by which the Top margin will be changed
  * @param {Number} ammount_bottom by which the Bottom margin  will be changed
*/


animateCardMarginTopBottom = function(card, ammount_top, ammount_bottom) {
  return card.animate({
    marginBottom: ammount_top,
    marginTop: ammount_bottom
  }, 200);
};

toggleCardMarginWrapper = function(card, elem_id_list) {
  var bottom_base_element, toggleCardMargin, top_base_element;
  top_base_element = $('#' + elem_id_list[0]);
  bottom_base_element = $('#' + elem_id_list[1]);
  toggleCardMargin = function() {
    var ammount_bottom, ammount_top, isExpanded;
    isExpanded = card.attr('data-expanded') === 'true';
    if (!isExpanded) {
      ammount_top = '+=' + top_base_element.height();
      ammount_bottom = '+=' + bottom_base_element.height();
      animateCardMarginTopBottom(card, ammount_top, ammount_top);
      return card.attr('data-expanded', 'true');
    } else {
      ammount_top = '-=' + top_base_element.height();
      ammount_bottom = '-=' + bottom_base_element.height();
      animateCardMarginTopBottom(card, ammount_top, ammount_bottom);
      /*card.css
        'margin-top': ammount_top
        'margin-bottom': ammount_bottom
      */

      return card.attr('data-expanded', 'false');
    }
  };
  return toggleCardMargin;
};

toggleExpandableMenuWrapper = function(elem_id_list) {
  var toggleExpandableMenu;
  toggleExpandableMenu = function() {
    return $.each(elem_id_list, function(index, elem_id) {
      var elem;
      elem = $('#' + elem_id);
      if (elem.css('display') === 'none') {
        return elem.slideDown(300);
      } else {
        return elem.slideUp(300);
      }
    });
  };
  return toggleExpandableMenu;
};

/* *
  *  Initializes the cropped container on the elements of the class 'expandable-menu'
*/


initExpendableMenus = function() {
  return $('.expandable-menu').each(function() {
    var activators, current_card;
    current_card = $(this);
    activators = $(this).find('a[data-activates]');
    return activators.each(function() {
      var activated_list, activator, f, margin_adapter, menus_expander;
      activator = $(this);
      activated_list = activator.attr('data-activates').split(',');
      menus_expander = toggleExpandableMenuWrapper(activated_list);
      if (activator.attr('data-adaptMargin') === 'yes') {
        margin_adapter = toggleCardMarginWrapper(current_card, activated_list);
        f = function() {
          margin_adapter();
          return window.setTimeout(menus_expander, 250);
        };
        return activator.click(f);
      } else {
        return activator.click(menus_expander);
      }
    });
  });
};
