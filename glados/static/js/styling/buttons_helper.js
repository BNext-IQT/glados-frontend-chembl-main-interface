// Generated by CoffeeScript 1.4.0
var contract, cropTextIfNecessary, expand, hideExpandableMenu, hideExpandableMenuWrapper, initCroppedContainers, initCroppedTextFields, initExpendableMenus, setLessText, setMoreText, showExpandableMenu, toggleCroppedContainerWrapper, toggleExpandableMenuWrapper;

expand = function(elem) {
  elem.removeClass("cropped");
  return elem.addClass("expanded");
};

contract = function(elem) {
  elem.removeClass("expanded");
  return elem.addClass("cropped");
};

setMoreText = function(elem) {
  var icon;
  icon = $(elem).children('i');
  icon.removeClass('fa-caret-up');
  return icon.addClass('fa-caret-down');
};

setLessText = function(elem) {
  var icon;
  icon = $(elem).children('i');
  icon.removeClass('fa-caret-down');
  return icon.addClass('fa-caret-up');
};

/* *
  * @param {JQuery} elem element that is going to be toggled
  * @param {JQuery} buttons element that contains the buttons that activate this..
  * @return {Function} function that toggles the cropped container
*/


toggleCroppedContainerWrapper = function(elem, buttons) {
  var toggleCroppedContainer;
  toggleCroppedContainer = function() {
    if (elem.hasClass("expanded")) {
      contract(elem);
      setMoreText($(this));
      return buttons.removeClass('cropped-container-btns-exp');
    } else {
      expand(elem);
      setLessText($(this));
      return buttons.addClass('cropped-container-btns-exp');
    }
  };
  return toggleCroppedContainer;
};

/* *
  * Initializes the cropped container on the elements of the class 'cropped-container'
*/


initCroppedContainers = function() {
  return $('.cropped-container').each(function() {
    var activated, activator, buttons, heightLimit, overflow, toggler;
    activator = $(this).find('a[data-activates]');
    activated = $('#' + activator.attr('data-activates'));
    buttons = $(this).find('.cropped-container-btns');
    overflow = false;
    heightLimit = activated.offset().top + activated.height();
    activated.children().each(function() {
      var childHeightLimit;
      childHeightLimit = $(this).offset().top + $(this).height();
      if (childHeightLimit > heightLimit) {
        overflow = true;
        return false;
      }
    });
    if (overflow) {
      toggler = toggleCroppedContainerWrapper(activated, buttons);
      return activator.click(toggler);
    } else {
      return activator.hide();
    }
  });
};

showExpandableMenu = function(activator, elem) {
  activator.html('<i class="material-icons">remove</i>');
  return elem.slideDown(300);
};

hideExpandableMenu = function(activator, elem) {
  activator.html('<i class="material-icons">add</i>');
  return elem.slideUp(300);
};

hideExpandableMenuWrapper = function(activator, elem_id_list) {
  var toggleExpandableMenu;
  toggleExpandableMenu = function() {
    return $.each(elem_id_list, function(index, elem_id) {
      var elem;
      elem = $('#' + elem_id);
      return hideExpandableMenu(activator, elem);
    });
  };
  return toggleExpandableMenu;
};

/* *
* @param {JQuery} activator element that activates toggles the expandable menu
  * @param {Array} elem_id_list list of menu elements that are going to be shown
  * @return {Function} function that toggles the expandable menus
*/


toggleExpandableMenuWrapper = function(activator, elem_id_list) {
  var toggleExpandableMenu;
  toggleExpandableMenu = function() {
    return $.each(elem_id_list, function(index, elem_id) {
      var elem;
      elem = $('#' + elem_id);
      if (elem.css('display') === 'none') {
        return showExpandableMenu(activator, elem);
      } else {
        return hideExpandableMenu(activator, elem);
      }
    });
  };
  return toggleExpandableMenu;
};

/* *
  *  Initializes the cropped container on the elements of the class 'expandable-menu'
*/


initExpendableMenus = function() {
  return $('.expandable-menu').each(function() {
    var activators, currentDiv;
    currentDiv = $(this);
    activators = $(this).find('a[data-activates]');
    return activators.each(function() {
      var activated_list, activated_list_selectors, activator, hider, toggler;
      activator = $(this);
      activated_list = activator.attr('data-activates').split(',');
      toggler = toggleExpandableMenuWrapper(activator, activated_list);
      activator.click(toggler);
      hider = hideExpandableMenuWrapper(activator, activated_list);
      activated_list_selectors = '';
      $.each(activated_list, function(index, elem_id) {
        return activated_list_selectors += '#' + elem_id + ', ';
      });
      $('body').click(function(e) {
        if (!$.contains(currentDiv[0], e.target)) {
          return hider();
        }
      });
      return activator.click(function(event) {
        return event.stopPropagation();
      });
    });
  });
};

/* *
  *  Initializes the cropped container on the elements of the class 'cropped-text-field'
  * It is based on an input field to show the information
*/


initCroppedTextFields = function() {
  return $('.cropped-text-field').each(function() {
    var currentDiv, download_text_btn, input_field;
    currentDiv = $(this);
    input_field = $(this).find('input');
    input_field.click(function() {
      input_field.val(currentDiv.attr('data-original-value'));
      return input_field.select();
    });
    $(this).attr('data-original-value', input_field.attr('value'));
    download_text_btn = $(this).find('.download-text');
    download_text_btn.attr('download', CHEMBL_ID + '-' + download_text_btn.attr('data-filename-suffix') + '.txt');
    download_text_btn.attr('href', 'data:text/html,' + $(this).attr('data-original-value'));
    download_text_btn.addClass('tooltipped');
    download_text_btn.attr('data-tooltip', 'Download ' + download_text_btn.attr('data-filename-suffix') + ' file.');
    input_field.focusout(function() {
      return cropTextIfNecessary(currentDiv);
    });
    cropTextIfNecessary(currentDiv);
    return $(window).resize(function() {
      if (currentDiv.is(':visible')) {
        return cropTextIfNecessary(currentDiv);
      }
    });
  });
};

/* *
  * Decides if the input contained in the div is overlapping and the ellipsis must be shown.
  * if it is overlapping, shows the ellipsis and crops the text, if not, it doesn't show the ellipsis
  * and shows all the text in the input
  * @param {JQuery} input_div element that contains the ellipsis and the input
*/


cropTextIfNecessary = function(input_div) {
  var charLength, input_field, numVisibleChars, originalInputValue, shownValue;
  input_field = input_div.find('input')[0];
  console.log('--cropping');
  originalInputValue = input_div.attr('data-original-value');
  if (originalInputValue === void 0) {
    return;
  }
  console.log('cont cropping');
  input_field.value = originalInputValue;
  charLength = Math.round((input_field.scrollWidth / originalInputValue.length) + 0.5);
  numVisibleChars = Math.round(input_field.offsetWidth / charLength);
  if (input_field.scrollWidth > input_field.offsetWidth) {
    console.log('overflow!');
    shownValue = originalInputValue.substring(0, (numVisibleChars / 2) - 2) + ' ... ' + originalInputValue.substring(originalInputValue.length - ((numVisibleChars / 2) - 2), originalInputValue.length);
    return input_field.value = shownValue;
  } else {
    return input_field.value = originalInputValue;
  }
};
