// Generated by CoffeeScript 1.4.0
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

glados.useNameSpace('glados.models.paginated_collections', {
  WSPaginatedCollection: Backbone.Collection.extend({
    initialiseUrl: function() {
      return this.url = this.getPaginatedURL();
    },
    getPaginatedURL: function() {
      var column, columns, comparator, field, firstSeparator, full_url, info, limit_str, max, min, page_num, page_size, page_str, params, searchTerms, sorting, term, type, url, values, _i, _len;
      url = this.getMeta('base_url');
      page_num = this.getMeta('current_page');
      page_size = this.getMeta('page_size');
      params = [];
      limit_str = 'limit=' + page_size;
      page_str = 'offset=' + (page_num - 1) * page_size;
      params.push(limit_str);
      params.push(page_str);
      columns = this.getMeta('columns');
      sorting = _.filter(columns, function(col) {
        return col.is_sorting !== 0;
      });
      for (_i = 0, _len = sorting.length; _i < _len; _i++) {
        field = sorting[_i];
        comparator = field.comparator;
        if (field.is_sorting !== 1) {
          comparator = '-' + comparator;
        }
        params.push('order_by=' + comparator);
      }
      searchTerms = this.getMeta('search_terms');
      for (column in searchTerms) {
        info = searchTerms[column];
        type = info[0];
        term = info[1];
        if (type === 'text') {
          if (term !== '') {
            params.push(column + "__contains=" + term);
          }
        } else if (type === 'numeric') {
          values = term.split(',');
          min = values[0];
          max = values[1];
          params.push(column + "__gte=" + min);
          params.push(column + "__lte=" + max);
        } else if (type === 'boolean') {
          if (term !== 'any') {
            params.push(column + "=" + term);
          }
        }
      }
      firstSeparator = this.getMeta('base_url').indexOf('?') !== -1 ? '&' : '?';
      full_url = url + firstSeparator + params.join('&');
      return full_url;
    },
    setMeta: function(attr, value, storeAsString) {
      if (_.isString(value) && !storeAsString) {
        value = parseInt(value);
      }
      this.meta[attr] = value;
      return this.trigger('meta-changed');
    },
    getMeta: function(attr) {
      return this.meta[attr];
    },
    hasMeta: function(attr) {
      return __indexOf.call(_.keys(this.meta), attr) >= 0;
    },
    resetMeta: function(page_meta) {
      this.setMeta('total_records', page_meta.total_count);
      this.setMeta('page_size', page_meta.limit);
      this.setMeta('current_page', (page_meta.offset / page_meta.limit) + 1);
      this.setMeta('total_pages', Math.ceil(page_meta.total_count / page_meta.limit));
      return this.setMeta('records_in_page', page_meta.records_in_page);
    },
    resetPageSize: function(new_page_size) {
      if (new_page_size === '') {
        return;
      }
      this.setMeta('page_size', new_page_size);
      return this.setPage(1);
    },
    calculateTotalPages: function() {
      var total_pages;
      total_pages = Math.ceil(this.models.length / this.getMeta('page_size'));
      return this.setMeta('total_pages', total_pages);
    },
    calculateHowManyInCurrentPage: function() {
      var current_page, page_size, total_pages, total_records;
      current_page = this.getMeta('current_page');
      total_pages = this.getMeta('total_pages');
      total_records = this.getMeta('total_records');
      page_size = this.getMeta('page_size');
      if (total_pages === 1) {
        return this.setMeta('records_in_page', total_records);
      } else if (current_page === total_pages) {
        return this.setMeta('records_in_page', total_records % page_size);
      } else {
        return this.setMeta('records_in_page', this.getMeta('page_size'));
      }
    },
    getCurrentPage: function() {
      return this.models;
    },
    setPage: function(page_num) {
      var base_url;
      if (page_num > this.getMeta('total_pages')) {
        return;
      }
      console.log('getting page: ', page_num);
      base_url = this.getMeta('base_url');
      this.setMeta('current_page', page_num);
      this.url = this.getPaginatedURL();
      console.log('Getting page:');
      console.log(page_num);
      console.log('URL');
      console.log(this.url);
      return this.fetch();
    },
    currentlyOnLastPage: function() {
      return this.getMeta('current_page') === this.getMeta('total_pages');
    },
    sortCollection: function(comparator) {
      var columns;
      this.setMeta('current_page', 1);
      columns = this.getMeta('columns');
      this.setupColSorting(columns, comparator);
      this.url = this.getPaginatedURL();
      console.log('URL');
      console.log(this.url);
      return this.fetch();
    },
    resetSortData: function() {
      var col, columns, _i, _len, _results;
      this.comparator = void 0;
      columns = this.getMeta('columns');
      _results = [];
      for (_i = 0, _len = columns.length; _i < _len; _i++) {
        col = columns[_i];
        col.is_sorting = 0;
        _results.push(col.sort_class = 'fa-sort');
      }
      return _results;
    },
    setupColSorting: function(columns, comparator) {
      var col, is_descending, _i, _len;
      is_descending = false;
      for (_i = 0, _len = columns.length; _i < _len; _i++) {
        col = columns[_i];
        if (col.comparator === comparator) {
          col.is_sorting = (function() {
            switch (col.is_sorting) {
              case 0:
                return 1;
              default:
                return -col.is_sorting;
            }
          })();
          is_descending = col.is_sorting === -1;
        } else {
          col.is_sorting = 0;
        }
        col.sort_class = (function() {
          switch (col.is_sorting) {
            case -1:
              return 'fa-sort-desc';
            case 0:
              return 'fa-sort';
            case 1:
              return 'fa-sort-asc';
          }
        })();
      }
      return is_descending;
    },
    setSearch: function(term, column, type) {
      var searchTerms;
      if (term === '') {
        return;
      }
      this.setMeta('current_page', 1);
      if (this.getMeta('search_terms') == null) {
        this.setMeta('search_terms', {});
      }
      searchTerms = this.getMeta('search_terms');
      searchTerms[column] = [type, term];
      this.url = this.getPaginatedURL();
      console.log('URL');
      console.log(this.url);
      return this.fetch();
    },
    getCurrentSortingComparator: function() {
      var columns, comp, sorVal;
      columns = this.getMeta('columns');
      sorVal = _.find(columns, function(col) {
        return col.is_sorting !== 0;
      });
      comp = void 0;
      if (!!(sorVal != null)) {
        comp = sorVal.comparator;
      }
      return comp;
    }
  })
});
